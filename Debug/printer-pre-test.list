
printer-pre-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004798  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08004978  08004978  00014978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a10  08004a10  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004a10  08004a10  00014a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a18  08004a18  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a18  08004a18  00014a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a1c  08004a1c  00014a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004a20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000070  08004a90  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08004a90  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001333e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002296  00000000  00000000  000333de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  00035678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b98  00000000  00000000  000362e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dba4  00000000  00000000  00036e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ffc7  00000000  00000000  00054a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba0ea  00000000  00000000  000649eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011ead5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037bc  00000000  00000000  0011eb28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004960 	.word	0x08004960

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08004960 	.word	0x08004960

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_dmul>:
 80002d0:	b570      	push	{r4, r5, r6, lr}
 80002d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002de:	bf1d      	ittte	ne
 80002e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002e4:	ea94 0f0c 	teqne	r4, ip
 80002e8:	ea95 0f0c 	teqne	r5, ip
 80002ec:	f000 f8de 	bleq	80004ac <__aeabi_dmul+0x1dc>
 80002f0:	442c      	add	r4, r5
 80002f2:	ea81 0603 	eor.w	r6, r1, r3
 80002f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000302:	bf18      	it	ne
 8000304:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000308:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800030c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000310:	d038      	beq.n	8000384 <__aeabi_dmul+0xb4>
 8000312:	fba0 ce02 	umull	ip, lr, r0, r2
 8000316:	f04f 0500 	mov.w	r5, #0
 800031a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800031e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000322:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000326:	f04f 0600 	mov.w	r6, #0
 800032a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800032e:	f09c 0f00 	teq	ip, #0
 8000332:	bf18      	it	ne
 8000334:	f04e 0e01 	orrne.w	lr, lr, #1
 8000338:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800033c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000340:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000344:	d204      	bcs.n	8000350 <__aeabi_dmul+0x80>
 8000346:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800034a:	416d      	adcs	r5, r5
 800034c:	eb46 0606 	adc.w	r6, r6, r6
 8000350:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000354:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000358:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800035c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000360:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000364:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000368:	bf88      	it	hi
 800036a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800036e:	d81e      	bhi.n	80003ae <__aeabi_dmul+0xde>
 8000370:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000374:	bf08      	it	eq
 8000376:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800037a:	f150 0000 	adcs.w	r0, r0, #0
 800037e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000388:	ea46 0101 	orr.w	r1, r6, r1
 800038c:	ea40 0002 	orr.w	r0, r0, r2
 8000390:	ea81 0103 	eor.w	r1, r1, r3
 8000394:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000398:	bfc2      	ittt	gt
 800039a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800039e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80003a2:	bd70      	popgt	{r4, r5, r6, pc}
 80003a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80003a8:	f04f 0e00 	mov.w	lr, #0
 80003ac:	3c01      	subs	r4, #1
 80003ae:	f300 80ab 	bgt.w	8000508 <__aeabi_dmul+0x238>
 80003b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003b6:	bfde      	ittt	le
 80003b8:	2000      	movle	r0, #0
 80003ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003be:	bd70      	pople	{r4, r5, r6, pc}
 80003c0:	f1c4 0400 	rsb	r4, r4, #0
 80003c4:	3c20      	subs	r4, #32
 80003c6:	da35      	bge.n	8000434 <__aeabi_dmul+0x164>
 80003c8:	340c      	adds	r4, #12
 80003ca:	dc1b      	bgt.n	8000404 <__aeabi_dmul+0x134>
 80003cc:	f104 0414 	add.w	r4, r4, #20
 80003d0:	f1c4 0520 	rsb	r5, r4, #32
 80003d4:	fa00 f305 	lsl.w	r3, r0, r5
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f205 	lsl.w	r2, r1, r5
 80003e0:	ea40 0002 	orr.w	r0, r0, r2
 80003e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f0:	fa21 f604 	lsr.w	r6, r1, r4
 80003f4:	eb42 0106 	adc.w	r1, r2, r6
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 040c 	rsb	r4, r4, #12
 8000408:	f1c4 0520 	rsb	r5, r4, #32
 800040c:	fa00 f304 	lsl.w	r3, r0, r4
 8000410:	fa20 f005 	lsr.w	r0, r0, r5
 8000414:	fa01 f204 	lsl.w	r2, r1, r4
 8000418:	ea40 0002 	orr.w	r0, r0, r2
 800041c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000420:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000424:	f141 0100 	adc.w	r1, r1, #0
 8000428:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800042c:	bf08      	it	eq
 800042e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000432:	bd70      	pop	{r4, r5, r6, pc}
 8000434:	f1c4 0520 	rsb	r5, r4, #32
 8000438:	fa00 f205 	lsl.w	r2, r0, r5
 800043c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000440:	fa20 f304 	lsr.w	r3, r0, r4
 8000444:	fa01 f205 	lsl.w	r2, r1, r5
 8000448:	ea43 0302 	orr.w	r3, r3, r2
 800044c:	fa21 f004 	lsr.w	r0, r1, r4
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	fa21 f204 	lsr.w	r2, r1, r4
 8000458:	ea20 0002 	bic.w	r0, r0, r2
 800045c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000460:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000464:	bf08      	it	eq
 8000466:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800046a:	bd70      	pop	{r4, r5, r6, pc}
 800046c:	f094 0f00 	teq	r4, #0
 8000470:	d10f      	bne.n	8000492 <__aeabi_dmul+0x1c2>
 8000472:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000476:	0040      	lsls	r0, r0, #1
 8000478:	eb41 0101 	adc.w	r1, r1, r1
 800047c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000480:	bf08      	it	eq
 8000482:	3c01      	subeq	r4, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1a6>
 8000486:	ea41 0106 	orr.w	r1, r1, r6
 800048a:	f095 0f00 	teq	r5, #0
 800048e:	bf18      	it	ne
 8000490:	4770      	bxne	lr
 8000492:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000496:	0052      	lsls	r2, r2, #1
 8000498:	eb43 0303 	adc.w	r3, r3, r3
 800049c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80004a0:	bf08      	it	eq
 80004a2:	3d01      	subeq	r5, #1
 80004a4:	d0f7      	beq.n	8000496 <__aeabi_dmul+0x1c6>
 80004a6:	ea43 0306 	orr.w	r3, r3, r6
 80004aa:	4770      	bx	lr
 80004ac:	ea94 0f0c 	teq	r4, ip
 80004b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004b4:	bf18      	it	ne
 80004b6:	ea95 0f0c 	teqne	r5, ip
 80004ba:	d00c      	beq.n	80004d6 <__aeabi_dmul+0x206>
 80004bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004c0:	bf18      	it	ne
 80004c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c6:	d1d1      	bne.n	800046c <__aeabi_dmul+0x19c>
 80004c8:	ea81 0103 	eor.w	r1, r1, r3
 80004cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	f04f 0000 	mov.w	r0, #0
 80004d4:	bd70      	pop	{r4, r5, r6, pc}
 80004d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004da:	bf06      	itte	eq
 80004dc:	4610      	moveq	r0, r2
 80004de:	4619      	moveq	r1, r3
 80004e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004e4:	d019      	beq.n	800051a <__aeabi_dmul+0x24a>
 80004e6:	ea94 0f0c 	teq	r4, ip
 80004ea:	d102      	bne.n	80004f2 <__aeabi_dmul+0x222>
 80004ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004f0:	d113      	bne.n	800051a <__aeabi_dmul+0x24a>
 80004f2:	ea95 0f0c 	teq	r5, ip
 80004f6:	d105      	bne.n	8000504 <__aeabi_dmul+0x234>
 80004f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004fc:	bf1c      	itt	ne
 80004fe:	4610      	movne	r0, r2
 8000500:	4619      	movne	r1, r3
 8000502:	d10a      	bne.n	800051a <__aeabi_dmul+0x24a>
 8000504:	ea81 0103 	eor.w	r1, r1, r3
 8000508:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800050c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd70      	pop	{r4, r5, r6, pc}
 800051a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800051e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000522:	bd70      	pop	{r4, r5, r6, pc}

08000524 <__aeabi_drsub>:
 8000524:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e002      	b.n	8000530 <__adddf3>
 800052a:	bf00      	nop

0800052c <__aeabi_dsub>:
 800052c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000530 <__adddf3>:
 8000530:	b530      	push	{r4, r5, lr}
 8000532:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000536:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800053a:	ea94 0f05 	teq	r4, r5
 800053e:	bf08      	it	eq
 8000540:	ea90 0f02 	teqeq	r0, r2
 8000544:	bf1f      	itttt	ne
 8000546:	ea54 0c00 	orrsne.w	ip, r4, r0
 800054a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800054e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000552:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000556:	f000 80e2 	beq.w	800071e <__adddf3+0x1ee>
 800055a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800055e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000562:	bfb8      	it	lt
 8000564:	426d      	neglt	r5, r5
 8000566:	dd0c      	ble.n	8000582 <__adddf3+0x52>
 8000568:	442c      	add	r4, r5
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	ea82 0000 	eor.w	r0, r2, r0
 8000576:	ea83 0101 	eor.w	r1, r3, r1
 800057a:	ea80 0202 	eor.w	r2, r0, r2
 800057e:	ea81 0303 	eor.w	r3, r1, r3
 8000582:	2d36      	cmp	r5, #54	; 0x36
 8000584:	bf88      	it	hi
 8000586:	bd30      	pophi	{r4, r5, pc}
 8000588:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800058c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000590:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000594:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000598:	d002      	beq.n	80005a0 <__adddf3+0x70>
 800059a:	4240      	negs	r0, r0
 800059c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80005a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005ac:	d002      	beq.n	80005b4 <__adddf3+0x84>
 80005ae:	4252      	negs	r2, r2
 80005b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005b4:	ea94 0f05 	teq	r4, r5
 80005b8:	f000 80a7 	beq.w	800070a <__adddf3+0x1da>
 80005bc:	f1a4 0401 	sub.w	r4, r4, #1
 80005c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005c4:	db0d      	blt.n	80005e2 <__adddf3+0xb2>
 80005c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ca:	fa22 f205 	lsr.w	r2, r2, r5
 80005ce:	1880      	adds	r0, r0, r2
 80005d0:	f141 0100 	adc.w	r1, r1, #0
 80005d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005d8:	1880      	adds	r0, r0, r2
 80005da:	fa43 f305 	asr.w	r3, r3, r5
 80005de:	4159      	adcs	r1, r3
 80005e0:	e00e      	b.n	8000600 <__adddf3+0xd0>
 80005e2:	f1a5 0520 	sub.w	r5, r5, #32
 80005e6:	f10e 0e20 	add.w	lr, lr, #32
 80005ea:	2a01      	cmp	r2, #1
 80005ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005f0:	bf28      	it	cs
 80005f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005f6:	fa43 f305 	asr.w	r3, r3, r5
 80005fa:	18c0      	adds	r0, r0, r3
 80005fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	d507      	bpl.n	8000616 <__adddf3+0xe6>
 8000606:	f04f 0e00 	mov.w	lr, #0
 800060a:	f1dc 0c00 	rsbs	ip, ip, #0
 800060e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000612:	eb6e 0101 	sbc.w	r1, lr, r1
 8000616:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800061a:	d31b      	bcc.n	8000654 <__adddf3+0x124>
 800061c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000620:	d30c      	bcc.n	800063c <__adddf3+0x10c>
 8000622:	0849      	lsrs	r1, r1, #1
 8000624:	ea5f 0030 	movs.w	r0, r0, rrx
 8000628:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800062c:	f104 0401 	add.w	r4, r4, #1
 8000630:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000634:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000638:	f080 809a 	bcs.w	8000770 <__adddf3+0x240>
 800063c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000640:	bf08      	it	eq
 8000642:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000646:	f150 0000 	adcs.w	r0, r0, #0
 800064a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064e:	ea41 0105 	orr.w	r1, r1, r5
 8000652:	bd30      	pop	{r4, r5, pc}
 8000654:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000658:	4140      	adcs	r0, r0
 800065a:	eb41 0101 	adc.w	r1, r1, r1
 800065e:	3c01      	subs	r4, #1
 8000660:	bf28      	it	cs
 8000662:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000666:	d2e9      	bcs.n	800063c <__adddf3+0x10c>
 8000668:	f091 0f00 	teq	r1, #0
 800066c:	bf04      	itt	eq
 800066e:	4601      	moveq	r1, r0
 8000670:	2000      	moveq	r0, #0
 8000672:	fab1 f381 	clz	r3, r1
 8000676:	bf08      	it	eq
 8000678:	3320      	addeq	r3, #32
 800067a:	f1a3 030b 	sub.w	r3, r3, #11
 800067e:	f1b3 0220 	subs.w	r2, r3, #32
 8000682:	da0c      	bge.n	800069e <__adddf3+0x16e>
 8000684:	320c      	adds	r2, #12
 8000686:	dd08      	ble.n	800069a <__adddf3+0x16a>
 8000688:	f102 0c14 	add.w	ip, r2, #20
 800068c:	f1c2 020c 	rsb	r2, r2, #12
 8000690:	fa01 f00c 	lsl.w	r0, r1, ip
 8000694:	fa21 f102 	lsr.w	r1, r1, r2
 8000698:	e00c      	b.n	80006b4 <__adddf3+0x184>
 800069a:	f102 0214 	add.w	r2, r2, #20
 800069e:	bfd8      	it	le
 80006a0:	f1c2 0c20 	rsble	ip, r2, #32
 80006a4:	fa01 f102 	lsl.w	r1, r1, r2
 80006a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006ac:	bfdc      	itt	le
 80006ae:	ea41 010c 	orrle.w	r1, r1, ip
 80006b2:	4090      	lslle	r0, r2
 80006b4:	1ae4      	subs	r4, r4, r3
 80006b6:	bfa2      	ittt	ge
 80006b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006bc:	4329      	orrge	r1, r5
 80006be:	bd30      	popge	{r4, r5, pc}
 80006c0:	ea6f 0404 	mvn.w	r4, r4
 80006c4:	3c1f      	subs	r4, #31
 80006c6:	da1c      	bge.n	8000702 <__adddf3+0x1d2>
 80006c8:	340c      	adds	r4, #12
 80006ca:	dc0e      	bgt.n	80006ea <__adddf3+0x1ba>
 80006cc:	f104 0414 	add.w	r4, r4, #20
 80006d0:	f1c4 0220 	rsb	r2, r4, #32
 80006d4:	fa20 f004 	lsr.w	r0, r0, r4
 80006d8:	fa01 f302 	lsl.w	r3, r1, r2
 80006dc:	ea40 0003 	orr.w	r0, r0, r3
 80006e0:	fa21 f304 	lsr.w	r3, r1, r4
 80006e4:	ea45 0103 	orr.w	r1, r5, r3
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f1c4 040c 	rsb	r4, r4, #12
 80006ee:	f1c4 0220 	rsb	r2, r4, #32
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 f304 	lsl.w	r3, r1, r4
 80006fa:	ea40 0003 	orr.w	r0, r0, r3
 80006fe:	4629      	mov	r1, r5
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	fa21 f004 	lsr.w	r0, r1, r4
 8000706:	4629      	mov	r1, r5
 8000708:	bd30      	pop	{r4, r5, pc}
 800070a:	f094 0f00 	teq	r4, #0
 800070e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000712:	bf06      	itte	eq
 8000714:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000718:	3401      	addeq	r4, #1
 800071a:	3d01      	subne	r5, #1
 800071c:	e74e      	b.n	80005bc <__adddf3+0x8c>
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf18      	it	ne
 8000724:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000728:	d029      	beq.n	800077e <__adddf3+0x24e>
 800072a:	ea94 0f05 	teq	r4, r5
 800072e:	bf08      	it	eq
 8000730:	ea90 0f02 	teqeq	r0, r2
 8000734:	d005      	beq.n	8000742 <__adddf3+0x212>
 8000736:	ea54 0c00 	orrs.w	ip, r4, r0
 800073a:	bf04      	itt	eq
 800073c:	4619      	moveq	r1, r3
 800073e:	4610      	moveq	r0, r2
 8000740:	bd30      	pop	{r4, r5, pc}
 8000742:	ea91 0f03 	teq	r1, r3
 8000746:	bf1e      	ittt	ne
 8000748:	2100      	movne	r1, #0
 800074a:	2000      	movne	r0, #0
 800074c:	bd30      	popne	{r4, r5, pc}
 800074e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000752:	d105      	bne.n	8000760 <__adddf3+0x230>
 8000754:	0040      	lsls	r0, r0, #1
 8000756:	4149      	adcs	r1, r1
 8000758:	bf28      	it	cs
 800075a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800075e:	bd30      	pop	{r4, r5, pc}
 8000760:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000764:	bf3c      	itt	cc
 8000766:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800076a:	bd30      	popcc	{r4, r5, pc}
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000774:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd30      	pop	{r4, r5, pc}
 800077e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000782:	bf1a      	itte	ne
 8000784:	4619      	movne	r1, r3
 8000786:	4610      	movne	r0, r2
 8000788:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800078c:	bf1c      	itt	ne
 800078e:	460b      	movne	r3, r1
 8000790:	4602      	movne	r2, r0
 8000792:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000796:	bf06      	itte	eq
 8000798:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800079c:	ea91 0f03 	teqeq	r1, r3
 80007a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80007a4:	bd30      	pop	{r4, r5, pc}
 80007a6:	bf00      	nop

080007a8 <__aeabi_ui2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007bc:	f04f 0500 	mov.w	r5, #0
 80007c0:	f04f 0100 	mov.w	r1, #0
 80007c4:	e750      	b.n	8000668 <__adddf3+0x138>
 80007c6:	bf00      	nop

080007c8 <__aeabi_i2d>:
 80007c8:	f090 0f00 	teq	r0, #0
 80007cc:	bf04      	itt	eq
 80007ce:	2100      	moveq	r1, #0
 80007d0:	4770      	bxeq	lr
 80007d2:	b530      	push	{r4, r5, lr}
 80007d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007e0:	bf48      	it	mi
 80007e2:	4240      	negmi	r0, r0
 80007e4:	f04f 0100 	mov.w	r1, #0
 80007e8:	e73e      	b.n	8000668 <__adddf3+0x138>
 80007ea:	bf00      	nop

080007ec <__aeabi_f2d>:
 80007ec:	0042      	lsls	r2, r0, #1
 80007ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007fa:	bf1f      	itttt	ne
 80007fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000800:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000804:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000808:	4770      	bxne	lr
 800080a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800080e:	bf08      	it	eq
 8000810:	4770      	bxeq	lr
 8000812:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000816:	bf04      	itt	eq
 8000818:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800081c:	4770      	bxeq	lr
 800081e:	b530      	push	{r4, r5, lr}
 8000820:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000824:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000828:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800082c:	e71c      	b.n	8000668 <__adddf3+0x138>
 800082e:	bf00      	nop

08000830 <__aeabi_ul2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f04f 0500 	mov.w	r5, #0
 800083e:	e00a      	b.n	8000856 <__aeabi_l2d+0x16>

08000840 <__aeabi_l2d>:
 8000840:	ea50 0201 	orrs.w	r2, r0, r1
 8000844:	bf08      	it	eq
 8000846:	4770      	bxeq	lr
 8000848:	b530      	push	{r4, r5, lr}
 800084a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800084e:	d502      	bpl.n	8000856 <__aeabi_l2d+0x16>
 8000850:	4240      	negs	r0, r0
 8000852:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000856:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800085a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800085e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000862:	f43f aed8 	beq.w	8000616 <__adddf3+0xe6>
 8000866:	f04f 0203 	mov.w	r2, #3
 800086a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800086e:	bf18      	it	ne
 8000870:	3203      	addne	r2, #3
 8000872:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000876:	bf18      	it	ne
 8000878:	3203      	addne	r2, #3
 800087a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800087e:	f1c2 0320 	rsb	r3, r2, #32
 8000882:	fa00 fc03 	lsl.w	ip, r0, r3
 8000886:	fa20 f002 	lsr.w	r0, r0, r2
 800088a:	fa01 fe03 	lsl.w	lr, r1, r3
 800088e:	ea40 000e 	orr.w	r0, r0, lr
 8000892:	fa21 f102 	lsr.w	r1, r1, r2
 8000896:	4414      	add	r4, r2
 8000898:	e6bd      	b.n	8000616 <__adddf3+0xe6>
 800089a:	bf00      	nop

0800089c <__aeabi_d2f>:
 800089c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008a4:	bf24      	itt	cs
 80008a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008ae:	d90d      	bls.n	80008cc <__aeabi_d2f+0x30>
 80008b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008c4:	bf08      	it	eq
 80008c6:	f020 0001 	biceq.w	r0, r0, #1
 80008ca:	4770      	bx	lr
 80008cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008d0:	d121      	bne.n	8000916 <__aeabi_d2f+0x7a>
 80008d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008d6:	bfbc      	itt	lt
 80008d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008dc:	4770      	bxlt	lr
 80008de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008e6:	f1c2 0218 	rsb	r2, r2, #24
 80008ea:	f1c2 0c20 	rsb	ip, r2, #32
 80008ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80008f2:	fa20 f002 	lsr.w	r0, r0, r2
 80008f6:	bf18      	it	ne
 80008f8:	f040 0001 	orrne.w	r0, r0, #1
 80008fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000900:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000904:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000908:	ea40 000c 	orr.w	r0, r0, ip
 800090c:	fa23 f302 	lsr.w	r3, r3, r2
 8000910:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000914:	e7cc      	b.n	80008b0 <__aeabi_d2f+0x14>
 8000916:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800091a:	d107      	bne.n	800092c <__aeabi_d2f+0x90>
 800091c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000920:	bf1e      	ittt	ne
 8000922:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000926:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800092a:	4770      	bxne	lr
 800092c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000930:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000934:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_uldivmod>:
 800093c:	b953      	cbnz	r3, 8000954 <__aeabi_uldivmod+0x18>
 800093e:	b94a      	cbnz	r2, 8000954 <__aeabi_uldivmod+0x18>
 8000940:	2900      	cmp	r1, #0
 8000942:	bf08      	it	eq
 8000944:	2800      	cmpeq	r0, #0
 8000946:	bf1c      	itt	ne
 8000948:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800094c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000950:	f000 b96e 	b.w	8000c30 <__aeabi_idiv0>
 8000954:	f1ad 0c08 	sub.w	ip, sp, #8
 8000958:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800095c:	f000 f806 	bl	800096c <__udivmoddi4>
 8000960:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000964:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000968:	b004      	add	sp, #16
 800096a:	4770      	bx	lr

0800096c <__udivmoddi4>:
 800096c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000970:	9d08      	ldr	r5, [sp, #32]
 8000972:	4604      	mov	r4, r0
 8000974:	468c      	mov	ip, r1
 8000976:	2b00      	cmp	r3, #0
 8000978:	f040 8083 	bne.w	8000a82 <__udivmoddi4+0x116>
 800097c:	428a      	cmp	r2, r1
 800097e:	4617      	mov	r7, r2
 8000980:	d947      	bls.n	8000a12 <__udivmoddi4+0xa6>
 8000982:	fab2 f282 	clz	r2, r2
 8000986:	b142      	cbz	r2, 800099a <__udivmoddi4+0x2e>
 8000988:	f1c2 0020 	rsb	r0, r2, #32
 800098c:	fa24 f000 	lsr.w	r0, r4, r0
 8000990:	4091      	lsls	r1, r2
 8000992:	4097      	lsls	r7, r2
 8000994:	ea40 0c01 	orr.w	ip, r0, r1
 8000998:	4094      	lsls	r4, r2
 800099a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800099e:	0c23      	lsrs	r3, r4, #16
 80009a0:	fbbc f6f8 	udiv	r6, ip, r8
 80009a4:	fa1f fe87 	uxth.w	lr, r7
 80009a8:	fb08 c116 	mls	r1, r8, r6, ip
 80009ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009b0:	fb06 f10e 	mul.w	r1, r6, lr
 80009b4:	4299      	cmp	r1, r3
 80009b6:	d909      	bls.n	80009cc <__udivmoddi4+0x60>
 80009b8:	18fb      	adds	r3, r7, r3
 80009ba:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80009be:	f080 8119 	bcs.w	8000bf4 <__udivmoddi4+0x288>
 80009c2:	4299      	cmp	r1, r3
 80009c4:	f240 8116 	bls.w	8000bf4 <__udivmoddi4+0x288>
 80009c8:	3e02      	subs	r6, #2
 80009ca:	443b      	add	r3, r7
 80009cc:	1a5b      	subs	r3, r3, r1
 80009ce:	b2a4      	uxth	r4, r4
 80009d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d4:	fb08 3310 	mls	r3, r8, r0, r3
 80009d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80009e0:	45a6      	cmp	lr, r4
 80009e2:	d909      	bls.n	80009f8 <__udivmoddi4+0x8c>
 80009e4:	193c      	adds	r4, r7, r4
 80009e6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80009ea:	f080 8105 	bcs.w	8000bf8 <__udivmoddi4+0x28c>
 80009ee:	45a6      	cmp	lr, r4
 80009f0:	f240 8102 	bls.w	8000bf8 <__udivmoddi4+0x28c>
 80009f4:	3802      	subs	r0, #2
 80009f6:	443c      	add	r4, r7
 80009f8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009fc:	eba4 040e 	sub.w	r4, r4, lr
 8000a00:	2600      	movs	r6, #0
 8000a02:	b11d      	cbz	r5, 8000a0c <__udivmoddi4+0xa0>
 8000a04:	40d4      	lsrs	r4, r2
 8000a06:	2300      	movs	r3, #0
 8000a08:	e9c5 4300 	strd	r4, r3, [r5]
 8000a0c:	4631      	mov	r1, r6
 8000a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a12:	b902      	cbnz	r2, 8000a16 <__udivmoddi4+0xaa>
 8000a14:	deff      	udf	#255	; 0xff
 8000a16:	fab2 f282 	clz	r2, r2
 8000a1a:	2a00      	cmp	r2, #0
 8000a1c:	d150      	bne.n	8000ac0 <__udivmoddi4+0x154>
 8000a1e:	1bcb      	subs	r3, r1, r7
 8000a20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a24:	fa1f f887 	uxth.w	r8, r7
 8000a28:	2601      	movs	r6, #1
 8000a2a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000a2e:	0c21      	lsrs	r1, r4, #16
 8000a30:	fb0e 331c 	mls	r3, lr, ip, r3
 8000a34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a38:	fb08 f30c 	mul.w	r3, r8, ip
 8000a3c:	428b      	cmp	r3, r1
 8000a3e:	d907      	bls.n	8000a50 <__udivmoddi4+0xe4>
 8000a40:	1879      	adds	r1, r7, r1
 8000a42:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000a46:	d202      	bcs.n	8000a4e <__udivmoddi4+0xe2>
 8000a48:	428b      	cmp	r3, r1
 8000a4a:	f200 80e9 	bhi.w	8000c20 <__udivmoddi4+0x2b4>
 8000a4e:	4684      	mov	ip, r0
 8000a50:	1ac9      	subs	r1, r1, r3
 8000a52:	b2a3      	uxth	r3, r4
 8000a54:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a58:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a5c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000a60:	fb08 f800 	mul.w	r8, r8, r0
 8000a64:	45a0      	cmp	r8, r4
 8000a66:	d907      	bls.n	8000a78 <__udivmoddi4+0x10c>
 8000a68:	193c      	adds	r4, r7, r4
 8000a6a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a6e:	d202      	bcs.n	8000a76 <__udivmoddi4+0x10a>
 8000a70:	45a0      	cmp	r8, r4
 8000a72:	f200 80d9 	bhi.w	8000c28 <__udivmoddi4+0x2bc>
 8000a76:	4618      	mov	r0, r3
 8000a78:	eba4 0408 	sub.w	r4, r4, r8
 8000a7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a80:	e7bf      	b.n	8000a02 <__udivmoddi4+0x96>
 8000a82:	428b      	cmp	r3, r1
 8000a84:	d909      	bls.n	8000a9a <__udivmoddi4+0x12e>
 8000a86:	2d00      	cmp	r5, #0
 8000a88:	f000 80b1 	beq.w	8000bee <__udivmoddi4+0x282>
 8000a8c:	2600      	movs	r6, #0
 8000a8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000a92:	4630      	mov	r0, r6
 8000a94:	4631      	mov	r1, r6
 8000a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9a:	fab3 f683 	clz	r6, r3
 8000a9e:	2e00      	cmp	r6, #0
 8000aa0:	d14a      	bne.n	8000b38 <__udivmoddi4+0x1cc>
 8000aa2:	428b      	cmp	r3, r1
 8000aa4:	d302      	bcc.n	8000aac <__udivmoddi4+0x140>
 8000aa6:	4282      	cmp	r2, r0
 8000aa8:	f200 80b8 	bhi.w	8000c1c <__udivmoddi4+0x2b0>
 8000aac:	1a84      	subs	r4, r0, r2
 8000aae:	eb61 0103 	sbc.w	r1, r1, r3
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	468c      	mov	ip, r1
 8000ab6:	2d00      	cmp	r5, #0
 8000ab8:	d0a8      	beq.n	8000a0c <__udivmoddi4+0xa0>
 8000aba:	e9c5 4c00 	strd	r4, ip, [r5]
 8000abe:	e7a5      	b.n	8000a0c <__udivmoddi4+0xa0>
 8000ac0:	f1c2 0320 	rsb	r3, r2, #32
 8000ac4:	fa20 f603 	lsr.w	r6, r0, r3
 8000ac8:	4097      	lsls	r7, r2
 8000aca:	fa01 f002 	lsl.w	r0, r1, r2
 8000ace:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ad2:	40d9      	lsrs	r1, r3
 8000ad4:	4330      	orrs	r0, r6
 8000ad6:	0c03      	lsrs	r3, r0, #16
 8000ad8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000adc:	fa1f f887 	uxth.w	r8, r7
 8000ae0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ae4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae8:	fb06 f108 	mul.w	r1, r6, r8
 8000aec:	4299      	cmp	r1, r3
 8000aee:	fa04 f402 	lsl.w	r4, r4, r2
 8000af2:	d909      	bls.n	8000b08 <__udivmoddi4+0x19c>
 8000af4:	18fb      	adds	r3, r7, r3
 8000af6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000afa:	f080 808d 	bcs.w	8000c18 <__udivmoddi4+0x2ac>
 8000afe:	4299      	cmp	r1, r3
 8000b00:	f240 808a 	bls.w	8000c18 <__udivmoddi4+0x2ac>
 8000b04:	3e02      	subs	r6, #2
 8000b06:	443b      	add	r3, r7
 8000b08:	1a5b      	subs	r3, r3, r1
 8000b0a:	b281      	uxth	r1, r0
 8000b0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b18:	fb00 f308 	mul.w	r3, r0, r8
 8000b1c:	428b      	cmp	r3, r1
 8000b1e:	d907      	bls.n	8000b30 <__udivmoddi4+0x1c4>
 8000b20:	1879      	adds	r1, r7, r1
 8000b22:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000b26:	d273      	bcs.n	8000c10 <__udivmoddi4+0x2a4>
 8000b28:	428b      	cmp	r3, r1
 8000b2a:	d971      	bls.n	8000c10 <__udivmoddi4+0x2a4>
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	4439      	add	r1, r7
 8000b30:	1acb      	subs	r3, r1, r3
 8000b32:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000b36:	e778      	b.n	8000a2a <__udivmoddi4+0xbe>
 8000b38:	f1c6 0c20 	rsb	ip, r6, #32
 8000b3c:	fa03 f406 	lsl.w	r4, r3, r6
 8000b40:	fa22 f30c 	lsr.w	r3, r2, ip
 8000b44:	431c      	orrs	r4, r3
 8000b46:	fa20 f70c 	lsr.w	r7, r0, ip
 8000b4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000b4e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000b52:	fa21 f10c 	lsr.w	r1, r1, ip
 8000b56:	431f      	orrs	r7, r3
 8000b58:	0c3b      	lsrs	r3, r7, #16
 8000b5a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b5e:	fa1f f884 	uxth.w	r8, r4
 8000b62:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b66:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000b6a:	fb09 fa08 	mul.w	sl, r9, r8
 8000b6e:	458a      	cmp	sl, r1
 8000b70:	fa02 f206 	lsl.w	r2, r2, r6
 8000b74:	fa00 f306 	lsl.w	r3, r0, r6
 8000b78:	d908      	bls.n	8000b8c <__udivmoddi4+0x220>
 8000b7a:	1861      	adds	r1, r4, r1
 8000b7c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000b80:	d248      	bcs.n	8000c14 <__udivmoddi4+0x2a8>
 8000b82:	458a      	cmp	sl, r1
 8000b84:	d946      	bls.n	8000c14 <__udivmoddi4+0x2a8>
 8000b86:	f1a9 0902 	sub.w	r9, r9, #2
 8000b8a:	4421      	add	r1, r4
 8000b8c:	eba1 010a 	sub.w	r1, r1, sl
 8000b90:	b2bf      	uxth	r7, r7
 8000b92:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b96:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b9a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b9e:	fb00 f808 	mul.w	r8, r0, r8
 8000ba2:	45b8      	cmp	r8, r7
 8000ba4:	d907      	bls.n	8000bb6 <__udivmoddi4+0x24a>
 8000ba6:	19e7      	adds	r7, r4, r7
 8000ba8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000bac:	d22e      	bcs.n	8000c0c <__udivmoddi4+0x2a0>
 8000bae:	45b8      	cmp	r8, r7
 8000bb0:	d92c      	bls.n	8000c0c <__udivmoddi4+0x2a0>
 8000bb2:	3802      	subs	r0, #2
 8000bb4:	4427      	add	r7, r4
 8000bb6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bba:	eba7 0708 	sub.w	r7, r7, r8
 8000bbe:	fba0 8902 	umull	r8, r9, r0, r2
 8000bc2:	454f      	cmp	r7, r9
 8000bc4:	46c6      	mov	lr, r8
 8000bc6:	4649      	mov	r1, r9
 8000bc8:	d31a      	bcc.n	8000c00 <__udivmoddi4+0x294>
 8000bca:	d017      	beq.n	8000bfc <__udivmoddi4+0x290>
 8000bcc:	b15d      	cbz	r5, 8000be6 <__udivmoddi4+0x27a>
 8000bce:	ebb3 020e 	subs.w	r2, r3, lr
 8000bd2:	eb67 0701 	sbc.w	r7, r7, r1
 8000bd6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000bda:	40f2      	lsrs	r2, r6
 8000bdc:	ea4c 0202 	orr.w	r2, ip, r2
 8000be0:	40f7      	lsrs	r7, r6
 8000be2:	e9c5 2700 	strd	r2, r7, [r5]
 8000be6:	2600      	movs	r6, #0
 8000be8:	4631      	mov	r1, r6
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	462e      	mov	r6, r5
 8000bf0:	4628      	mov	r0, r5
 8000bf2:	e70b      	b.n	8000a0c <__udivmoddi4+0xa0>
 8000bf4:	4606      	mov	r6, r0
 8000bf6:	e6e9      	b.n	80009cc <__udivmoddi4+0x60>
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	e6fd      	b.n	80009f8 <__udivmoddi4+0x8c>
 8000bfc:	4543      	cmp	r3, r8
 8000bfe:	d2e5      	bcs.n	8000bcc <__udivmoddi4+0x260>
 8000c00:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c04:	eb69 0104 	sbc.w	r1, r9, r4
 8000c08:	3801      	subs	r0, #1
 8000c0a:	e7df      	b.n	8000bcc <__udivmoddi4+0x260>
 8000c0c:	4608      	mov	r0, r1
 8000c0e:	e7d2      	b.n	8000bb6 <__udivmoddi4+0x24a>
 8000c10:	4660      	mov	r0, ip
 8000c12:	e78d      	b.n	8000b30 <__udivmoddi4+0x1c4>
 8000c14:	4681      	mov	r9, r0
 8000c16:	e7b9      	b.n	8000b8c <__udivmoddi4+0x220>
 8000c18:	4666      	mov	r6, ip
 8000c1a:	e775      	b.n	8000b08 <__udivmoddi4+0x19c>
 8000c1c:	4630      	mov	r0, r6
 8000c1e:	e74a      	b.n	8000ab6 <__udivmoddi4+0x14a>
 8000c20:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c24:	4439      	add	r1, r7
 8000c26:	e713      	b.n	8000a50 <__udivmoddi4+0xe4>
 8000c28:	3802      	subs	r0, #2
 8000c2a:	443c      	add	r4, r7
 8000c2c:	e724      	b.n	8000a78 <__udivmoddi4+0x10c>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_idiv0>:
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop

08000c34 <custom_setup_debug_uart>:

// Register of the data we want to read. This may or may not work a similar way with other sensors, but putting here for completeness.
static const uint8_t TEMP_ADDR = 0x00;

void custom_setup_debug_uart(UART_HandleTypeDef *_debugUART)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	debugUART = _debugUART;
 8000c3c:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <custom_setup_debug_uart+0x1c>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6013      	str	r3, [r2, #0]
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	2000008c 	.word	0x2000008c

08000c54 <custom_tick>:
{
	tempSensor = _tempSensor;
}

void custom_tick()
{
 8000c54:	b590      	push	{r4, r7, lr}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af02      	add	r7, sp, #8
	int16_t val;
	// The user-readable value.
	float temp_c;

	// Byte 0 is the address we want to operate on. At least with the TMP102, not sure if many work this way.
	buf[0] = TEMP_ADDR;
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	4b4d      	ldr	r3, [pc, #308]	; (8000d94 <custom_tick+0x140>)
 8000c5e:	701a      	strb	r2, [r3, #0]
	// TODO: THIS BLOCKS!!
	ret = HAL_I2C_Master_Transmit(tempSensor, TMP102_ADDR, buf, 1, HAL_MAX_DELAY);
 8000c60:	4b4d      	ldr	r3, [pc, #308]	; (8000d98 <custom_tick+0x144>)
 8000c62:	6818      	ldr	r0, [r3, #0]
 8000c64:	2390      	movs	r3, #144	; 0x90
 8000c66:	b299      	uxth	r1, r3
 8000c68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	2301      	movs	r3, #1
 8000c70:	4a48      	ldr	r2, [pc, #288]	; (8000d94 <custom_tick+0x140>)
 8000c72:	f000 ff09 	bl	8001a88 <HAL_I2C_Master_Transmit>
 8000c76:	4603      	mov	r3, r0
 8000c78:	717b      	strb	r3, [r7, #5]
	if (ret != HAL_OK) {
 8000c7a:	797b      	ldrb	r3, [r7, #5]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d009      	beq.n	8000c94 <custom_tick+0x40>
		strcpy((char *)buf, "Error Tx\r\n");
 8000c80:	4a44      	ldr	r2, [pc, #272]	; (8000d94 <custom_tick+0x140>)
 8000c82:	4b46      	ldr	r3, [pc, #280]	; (8000d9c <custom_tick+0x148>)
 8000c84:	cb03      	ldmia	r3!, {r0, r1}
 8000c86:	6010      	str	r0, [r2, #0]
 8000c88:	6051      	str	r1, [r2, #4]
 8000c8a:	8819      	ldrh	r1, [r3, #0]
 8000c8c:	789b      	ldrb	r3, [r3, #2]
 8000c8e:	8111      	strh	r1, [r2, #8]
 8000c90:	7293      	strb	r3, [r2, #10]
 8000c92:	e065      	b.n	8000d60 <custom_tick+0x10c>
	} else {
		// TODO: THIS BLOCKS!!
		ret = HAL_I2C_Master_Receive(tempSensor, TMP102_ADDR, buf, 2, HAL_MAX_DELAY);
 8000c94:	4b40      	ldr	r3, [pc, #256]	; (8000d98 <custom_tick+0x144>)
 8000c96:	6818      	ldr	r0, [r3, #0]
 8000c98:	2390      	movs	r3, #144	; 0x90
 8000c9a:	b299      	uxth	r1, r3
 8000c9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ca0:	9300      	str	r3, [sp, #0]
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	4a3b      	ldr	r2, [pc, #236]	; (8000d94 <custom_tick+0x140>)
 8000ca6:	f000 ffe3 	bl	8001c70 <HAL_I2C_Master_Receive>
 8000caa:	4603      	mov	r3, r0
 8000cac:	717b      	strb	r3, [r7, #5]
		if (ret != HAL_OK) {
 8000cae:	797b      	ldrb	r3, [r7, #5]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d009      	beq.n	8000cc8 <custom_tick+0x74>
			strcpy((char *)buf, "Error Rx\r\n");
 8000cb4:	4a37      	ldr	r2, [pc, #220]	; (8000d94 <custom_tick+0x140>)
 8000cb6:	4b3a      	ldr	r3, [pc, #232]	; (8000da0 <custom_tick+0x14c>)
 8000cb8:	cb03      	ldmia	r3!, {r0, r1}
 8000cba:	6010      	str	r0, [r2, #0]
 8000cbc:	6051      	str	r1, [r2, #4]
 8000cbe:	8819      	ldrh	r1, [r3, #0]
 8000cc0:	789b      	ldrb	r3, [r3, #2]
 8000cc2:	8111      	strh	r1, [r2, #8]
 8000cc4:	7293      	strb	r3, [r2, #10]
 8000cc6:	e04b      	b.n	8000d60 <custom_tick+0x10c>
		} else {
			// Combine bytes
			val = ((int16_t)buf[0] << 4) | (buf[1] >> 4);
 8000cc8:	4b32      	ldr	r3, [pc, #200]	; (8000d94 <custom_tick+0x140>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	011b      	lsls	r3, r3, #4
 8000cce:	b21a      	sxth	r2, r3
 8000cd0:	4b30      	ldr	r3, [pc, #192]	; (8000d94 <custom_tick+0x140>)
 8000cd2:	785b      	ldrb	r3, [r3, #1]
 8000cd4:	091b      	lsrs	r3, r3, #4
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	b21b      	sxth	r3, r3
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	80fb      	strh	r3, [r7, #6]

			// Convert to 2's complement
			if (val > 0x7FF) {
 8000cde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ce2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ce6:	db05      	blt.n	8000cf4 <custom_tick+0xa0>
				val |= 0xF000;
 8000ce8:	88fb      	ldrh	r3, [r7, #6]
 8000cea:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8000cee:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8000cf2:	80fb      	strh	r3, [r7, #6]
			}

			temp_c = val * 0.0625;
 8000cf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fd65 	bl	80007c8 <__aeabi_i2d>
 8000cfe:	f04f 0200 	mov.w	r2, #0
 8000d02:	4b28      	ldr	r3, [pc, #160]	; (8000da4 <custom_tick+0x150>)
 8000d04:	f7ff fae4 	bl	80002d0 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4610      	mov	r0, r2
 8000d0e:	4619      	mov	r1, r3
 8000d10:	f7ff fdc4 	bl	800089c <__aeabi_d2f>
 8000d14:	4603      	mov	r3, r0
 8000d16:	603b      	str	r3, [r7, #0]

			temp_c *= 100;
 8000d18:	edd7 7a00 	vldr	s15, [r7]
 8000d1c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8000da8 <custom_tick+0x154>
 8000d20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d24:	edc7 7a00 	vstr	s15, [r7]
			sprintf((char *)buf, "%u.%02u C\r\n",
					((unsigned int)temp_c / 100),
 8000d28:	edd7 7a00 	vldr	s15, [r7]
 8000d2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d30:	ee17 2a90 	vmov	r2, s15
			sprintf((char *)buf, "%u.%02u C\r\n",
 8000d34:	4b1d      	ldr	r3, [pc, #116]	; (8000dac <custom_tick+0x158>)
 8000d36:	fba3 2302 	umull	r2, r3, r3, r2
 8000d3a:	095a      	lsrs	r2, r3, #5
					((unsigned int)temp_c % 100)
 8000d3c:	edd7 7a00 	vldr	s15, [r7]
 8000d40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d44:	ee17 1a90 	vmov	r1, s15
			sprintf((char *)buf, "%u.%02u C\r\n",
 8000d48:	4b18      	ldr	r3, [pc, #96]	; (8000dac <custom_tick+0x158>)
 8000d4a:	fba3 0301 	umull	r0, r3, r3, r1
 8000d4e:	095b      	lsrs	r3, r3, #5
 8000d50:	2064      	movs	r0, #100	; 0x64
 8000d52:	fb00 f303 	mul.w	r3, r0, r3
 8000d56:	1acb      	subs	r3, r1, r3
 8000d58:	4915      	ldr	r1, [pc, #84]	; (8000db0 <custom_tick+0x15c>)
 8000d5a:	480e      	ldr	r0, [pc, #56]	; (8000d94 <custom_tick+0x140>)
 8000d5c:	f003 f9d2 	bl	8004104 <siprintf>
			);
		}
	}

	if (debugUART != 0) {
 8000d60:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <custom_tick+0x160>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d010      	beq.n	8000d8a <custom_tick+0x136>
		// Sample code for UART communication.
		// TODO: THIS BLOCKS!!
		HAL_UART_Transmit(debugUART, buf, strlen((char *)buf), HAL_MAX_DELAY);
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <custom_tick+0x160>)
 8000d6a:	681c      	ldr	r4, [r3, #0]
 8000d6c:	4809      	ldr	r0, [pc, #36]	; (8000d94 <custom_tick+0x140>)
 8000d6e:	f7ff fa57 	bl	8000220 <strlen>
 8000d72:	4603      	mov	r3, r0
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d7a:	4906      	ldr	r1, [pc, #24]	; (8000d94 <custom_tick+0x140>)
 8000d7c:	4620      	mov	r0, r4
 8000d7e:	f002 fba5 	bl	80034cc <HAL_UART_Transmit>
		HAL_Delay(500);
 8000d82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d86:	f000 fb4f 	bl	8001428 <HAL_Delay>
	}



}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd90      	pop	{r4, r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200000a0 	.word	0x200000a0
 8000d98:	20000090 	.word	0x20000090
 8000d9c:	08004978 	.word	0x08004978
 8000da0:	08004984 	.word	0x08004984
 8000da4:	3fb00000 	.word	0x3fb00000
 8000da8:	42c80000 	.word	0x42c80000
 8000dac:	51eb851f 	.word	0x51eb851f
 8000db0:	08004990 	.word	0x08004990
 8000db4:	2000008c 	.word	0x2000008c

08000db8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	custom_setup_debug_uart(&hlpuart1);
 8000dbc:	4807      	ldr	r0, [pc, #28]	; (8000ddc <main+0x24>)
 8000dbe:	f7ff ff39 	bl	8000c34 <custom_setup_debug_uart>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000dc2:	f000 fac0 	bl	8001346 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000dc6:	f000 f80b 	bl	8000de0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000dca:	f000 f8df 	bl	8000f8c <MX_GPIO_Init>
	MX_LPUART1_UART_Init();
 8000dce:	f000 f893 	bl	8000ef8 <MX_LPUART1_UART_Init>
	MX_I2C1_Init();
 8000dd2:	f000 f851 	bl	8000e78 <MX_I2C1_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		custom_tick();
 8000dd6:	f7ff ff3d 	bl	8000c54 <custom_tick>
 8000dda:	e7fc      	b.n	8000dd6 <main+0x1e>
 8000ddc:	200000f8 	.word	0x200000f8

08000de0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b094      	sub	sp, #80	; 0x50
 8000de4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000de6:	f107 0318 	add.w	r3, r7, #24
 8000dea:	2238      	movs	r2, #56	; 0x38
 8000dec:	2100      	movs	r1, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f003 f980 	bl	80040f4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	60da      	str	r2, [r3, #12]
 8000e00:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000e02:	2000      	movs	r0, #0
 8000e04:	f001 fb3a 	bl	800247c <HAL_PWREx_ControlVoltageScaling>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e12:	2340      	movs	r3, #64	; 0x40
 8000e14:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e16:	2302      	movs	r3, #2
 8000e18:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000e1e:	2304      	movs	r3, #4
 8000e20:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8000e22:	2355      	movs	r3, #85	; 0x55
 8000e24:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e26:	2302      	movs	r3, #2
 8000e28:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000e32:	f107 0318 	add.w	r3, r7, #24
 8000e36:	4618      	mov	r0, r3
 8000e38:	f001 fbd4 	bl	80025e4 <HAL_RCC_OscConfig>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <SystemClock_Config+0x66>
		Error_Handler();
 8000e42:	f000 f909 	bl	8001058 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000e46:	230f      	movs	r3, #15
 8000e48:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	2104      	movs	r1, #4
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f001 fed8 	bl	8002c14 <HAL_RCC_ClockConfig>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <SystemClock_Config+0x8e>
		Error_Handler();
 8000e6a:	f000 f8f5 	bl	8001058 <Error_Handler>
	}
}
 8000e6e:	bf00      	nop
 8000e70:	3750      	adds	r7, #80	; 0x50
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <MX_I2C1_Init+0x74>)
 8000e7e:	4a1c      	ldr	r2, [pc, #112]	; (8000ef0 <MX_I2C1_Init+0x78>)
 8000e80:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x30A0A7FB;
 8000e82:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <MX_I2C1_Init+0x74>)
 8000e84:	4a1b      	ldr	r2, [pc, #108]	; (8000ef4 <MX_I2C1_Init+0x7c>)
 8000e86:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000e88:	4b18      	ldr	r3, [pc, #96]	; (8000eec <MX_I2C1_Init+0x74>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e8e:	4b17      	ldr	r3, [pc, #92]	; (8000eec <MX_I2C1_Init+0x74>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e94:	4b15      	ldr	r3, [pc, #84]	; (8000eec <MX_I2C1_Init+0x74>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000e9a:	4b14      	ldr	r3, [pc, #80]	; (8000eec <MX_I2C1_Init+0x74>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <MX_I2C1_Init+0x74>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <MX_I2C1_Init+0x74>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eac:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <MX_I2C1_Init+0x74>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000eb2:	480e      	ldr	r0, [pc, #56]	; (8000eec <MX_I2C1_Init+0x74>)
 8000eb4:	f000 fd58 	bl	8001968 <HAL_I2C_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_I2C1_Init+0x4a>
		Error_Handler();
 8000ebe:	f000 f8cb 	bl	8001058 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4809      	ldr	r0, [pc, #36]	; (8000eec <MX_I2C1_Init+0x74>)
 8000ec6:	f001 fa41 	bl	800234c <HAL_I2CEx_ConfigAnalogFilter>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000ed0:	f000 f8c2 	bl	8001058 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <MX_I2C1_Init+0x74>)
 8000ed8:	f001 fa83 	bl	80023e2 <HAL_I2CEx_ConfigDigitalFilter>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_I2C1_Init+0x6e>
		Error_Handler();
 8000ee2:	f000 f8b9 	bl	8001058 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200000ac 	.word	0x200000ac
 8000ef0:	40005400 	.word	0x40005400
 8000ef4:	30a0a7fb 	.word	0x30a0a7fb

08000ef8 <MX_LPUART1_UART_Init>:
/**
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 8000efc:	4b21      	ldr	r3, [pc, #132]	; (8000f84 <MX_LPUART1_UART_Init+0x8c>)
 8000efe:	4a22      	ldr	r2, [pc, #136]	; (8000f88 <MX_LPUART1_UART_Init+0x90>)
 8000f00:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 115200;
 8000f02:	4b20      	ldr	r3, [pc, #128]	; (8000f84 <MX_LPUART1_UART_Init+0x8c>)
 8000f04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f08:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f0a:	4b1e      	ldr	r3, [pc, #120]	; (8000f84 <MX_LPUART1_UART_Init+0x8c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000f10:	4b1c      	ldr	r3, [pc, #112]	; (8000f84 <MX_LPUART1_UART_Init+0x8c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000f16:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <MX_LPUART1_UART_Init+0x8c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000f1c:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <MX_LPUART1_UART_Init+0x8c>)
 8000f1e:	220c      	movs	r2, #12
 8000f20:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f22:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <MX_LPUART1_UART_Init+0x8c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f28:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <MX_LPUART1_UART_Init+0x8c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <MX_LPUART1_UART_Init+0x8c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	625a      	str	r2, [r3, #36]	; 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f34:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <MX_LPUART1_UART_Init+0x8c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 8000f3a:	4812      	ldr	r0, [pc, #72]	; (8000f84 <MX_LPUART1_UART_Init+0x8c>)
 8000f3c:	f002 fa76 	bl	800342c <HAL_UART_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_LPUART1_UART_Init+0x52>
		Error_Handler();
 8000f46:	f000 f887 	bl	8001058 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8)
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	480d      	ldr	r0, [pc, #52]	; (8000f84 <MX_LPUART1_UART_Init+0x8c>)
 8000f4e:	f002 ffdd 	bl	8003f0c <HAL_UARTEx_SetTxFifoThreshold>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_LPUART1_UART_Init+0x64>
			!= HAL_OK) {
		Error_Handler();
 8000f58:	f000 f87e 	bl	8001058 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8)
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4809      	ldr	r0, [pc, #36]	; (8000f84 <MX_LPUART1_UART_Init+0x8c>)
 8000f60:	f003 f812 	bl	8003f88 <HAL_UARTEx_SetRxFifoThreshold>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_LPUART1_UART_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 8000f6a:	f000 f875 	bl	8001058 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK) {
 8000f6e:	4805      	ldr	r0, [pc, #20]	; (8000f84 <MX_LPUART1_UART_Init+0x8c>)
 8000f70:	f002 ff93 	bl	8003e9a <HAL_UARTEx_DisableFifoMode>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_LPUART1_UART_Init+0x86>
		Error_Handler();
 8000f7a:	f000 f86d 	bl	8001058 <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	200000f8 	.word	0x200000f8
 8000f88:	40008000 	.word	0x40008000

08000f8c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000f92:	f107 0314 	add.w	r3, r7, #20
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
 8000fa0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa2:	4b2b      	ldr	r3, [pc, #172]	; (8001050 <MX_GPIO_Init+0xc4>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa6:	4a2a      	ldr	r2, [pc, #168]	; (8001050 <MX_GPIO_Init+0xc4>)
 8000fa8:	f043 0304 	orr.w	r3, r3, #4
 8000fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fae:	4b28      	ldr	r3, [pc, #160]	; (8001050 <MX_GPIO_Init+0xc4>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb2:	f003 0304 	and.w	r3, r3, #4
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000fba:	4b25      	ldr	r3, [pc, #148]	; (8001050 <MX_GPIO_Init+0xc4>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	4a24      	ldr	r2, [pc, #144]	; (8001050 <MX_GPIO_Init+0xc4>)
 8000fc0:	f043 0320 	orr.w	r3, r3, #32
 8000fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc6:	4b22      	ldr	r3, [pc, #136]	; (8001050 <MX_GPIO_Init+0xc4>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	f003 0320 	and.w	r3, r3, #32
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <MX_GPIO_Init+0xc4>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	4a1e      	ldr	r2, [pc, #120]	; (8001050 <MX_GPIO_Init+0xc4>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fde:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <MX_GPIO_Init+0xc4>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	4b19      	ldr	r3, [pc, #100]	; (8001050 <MX_GPIO_Init+0xc4>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fee:	4a18      	ldr	r2, [pc, #96]	; (8001050 <MX_GPIO_Init+0xc4>)
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff6:	4b16      	ldr	r3, [pc, #88]	; (8001050 <MX_GPIO_Init+0xc4>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	2120      	movs	r1, #32
 8001006:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800100a:	f000 fc95 	bl	8001938 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800100e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001012:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001014:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001018:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	4619      	mov	r1, r3
 8001024:	480b      	ldr	r0, [pc, #44]	; (8001054 <MX_GPIO_Init+0xc8>)
 8001026:	f000 fb05 	bl	8001634 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 800102a:	2320      	movs	r3, #32
 800102c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102e:	2301      	movs	r3, #1
 8001030:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	4619      	mov	r1, r3
 8001040:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001044:	f000 faf6 	bl	8001634 <HAL_GPIO_Init>

}
 8001048:	bf00      	nop
 800104a:	3728      	adds	r7, #40	; 0x28
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40021000 	.word	0x40021000
 8001054:	48000800 	.word	0x48000800

08001058 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800105c:	b672      	cpsid	i
}
 800105e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001060:	e7fe      	b.n	8001060 <Error_Handler+0x8>
	...

08001064 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106a:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <HAL_MspInit+0x44>)
 800106c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800106e:	4a0e      	ldr	r2, [pc, #56]	; (80010a8 <HAL_MspInit+0x44>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6613      	str	r3, [r2, #96]	; 0x60
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <HAL_MspInit+0x44>)
 8001078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <HAL_MspInit+0x44>)
 8001084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001086:	4a08      	ldr	r2, [pc, #32]	; (80010a8 <HAL_MspInit+0x44>)
 8001088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108c:	6593      	str	r3, [r2, #88]	; 0x58
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_MspInit+0x44>)
 8001090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800109a:	f001 fa93 	bl	80025c4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40021000 	.word	0x40021000

080010ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b09a      	sub	sp, #104	; 0x68
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010c4:	f107 0310 	add.w	r3, r7, #16
 80010c8:	2244      	movs	r2, #68	; 0x44
 80010ca:	2100      	movs	r1, #0
 80010cc:	4618      	mov	r0, r3
 80010ce:	f003 f811 	bl	80040f4 <memset>
  if(hi2c->Instance==I2C1)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a1f      	ldr	r2, [pc, #124]	; (8001154 <HAL_I2C_MspInit+0xa8>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d136      	bne.n	800114a <HAL_I2C_MspInit+0x9e>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010dc:	2340      	movs	r3, #64	; 0x40
 80010de:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010e0:	2300      	movs	r3, #0
 80010e2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	4618      	mov	r0, r3
 80010ea:	f001 ffaf 	bl	800304c <HAL_RCCEx_PeriphCLKConfig>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80010f4:	f7ff ffb0 	bl	8001058 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f8:	4b17      	ldr	r3, [pc, #92]	; (8001158 <HAL_I2C_MspInit+0xac>)
 80010fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fc:	4a16      	ldr	r2, [pc, #88]	; (8001158 <HAL_I2C_MspInit+0xac>)
 80010fe:	f043 0302 	orr.w	r3, r3, #2
 8001102:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001104:	4b14      	ldr	r3, [pc, #80]	; (8001158 <HAL_I2C_MspInit+0xac>)
 8001106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001110:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001114:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001116:	2312      	movs	r3, #18
 8001118:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2300      	movs	r3, #0
 8001120:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001122:	2304      	movs	r3, #4
 8001124:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001126:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800112a:	4619      	mov	r1, r3
 800112c:	480b      	ldr	r0, [pc, #44]	; (800115c <HAL_I2C_MspInit+0xb0>)
 800112e:	f000 fa81 	bl	8001634 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <HAL_I2C_MspInit+0xac>)
 8001134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001136:	4a08      	ldr	r2, [pc, #32]	; (8001158 <HAL_I2C_MspInit+0xac>)
 8001138:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800113c:	6593      	str	r3, [r2, #88]	; 0x58
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <HAL_I2C_MspInit+0xac>)
 8001140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001142:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800114a:	bf00      	nop
 800114c:	3768      	adds	r7, #104	; 0x68
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40005400 	.word	0x40005400
 8001158:	40021000 	.word	0x40021000
 800115c:	48000400 	.word	0x48000400

08001160 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b09a      	sub	sp, #104	; 0x68
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001178:	f107 0310 	add.w	r3, r7, #16
 800117c:	2244      	movs	r2, #68	; 0x44
 800117e:	2100      	movs	r1, #0
 8001180:	4618      	mov	r0, r3
 8001182:	f002 ffb7 	bl	80040f4 <memset>
  if(huart->Instance==LPUART1)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a1f      	ldr	r2, [pc, #124]	; (8001208 <HAL_UART_MspInit+0xa8>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d136      	bne.n	80011fe <HAL_UART_MspInit+0x9e>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001190:	2320      	movs	r3, #32
 8001192:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001194:	2300      	movs	r3, #0
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	4618      	mov	r0, r3
 800119e:	f001 ff55 	bl	800304c <HAL_RCCEx_PeriphCLKConfig>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011a8:	f7ff ff56 	bl	8001058 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80011ac:	4b17      	ldr	r3, [pc, #92]	; (800120c <HAL_UART_MspInit+0xac>)
 80011ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011b0:	4a16      	ldr	r2, [pc, #88]	; (800120c <HAL_UART_MspInit+0xac>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80011b8:	4b14      	ldr	r3, [pc, #80]	; (800120c <HAL_UART_MspInit+0xac>)
 80011ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <HAL_UART_MspInit+0xac>)
 80011c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c8:	4a10      	ldr	r2, [pc, #64]	; (800120c <HAL_UART_MspInit+0xac>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d0:	4b0e      	ldr	r3, [pc, #56]	; (800120c <HAL_UART_MspInit+0xac>)
 80011d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80011dc:	230c      	movs	r3, #12
 80011de:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2300      	movs	r3, #0
 80011ea:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80011ec:	230c      	movs	r3, #12
 80011ee:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011f4:	4619      	mov	r1, r3
 80011f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fa:	f000 fa1b 	bl	8001634 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80011fe:	bf00      	nop
 8001200:	3768      	adds	r7, #104	; 0x68
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40008000 	.word	0x40008000
 800120c:	40021000 	.word	0x40021000

08001210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <NMI_Handler+0x4>

08001216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <HardFault_Handler+0x4>

0800121c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <MemManage_Handler+0x4>

08001222 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <BusFault_Handler+0x4>

08001228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <UsageFault_Handler+0x4>

0800122e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800125c:	f000 f8c6 	bl	80013ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}

08001264 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800126c:	4a14      	ldr	r2, [pc, #80]	; (80012c0 <_sbrk+0x5c>)
 800126e:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <_sbrk+0x60>)
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001278:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <_sbrk+0x64>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d102      	bne.n	8001286 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001280:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <_sbrk+0x64>)
 8001282:	4a12      	ldr	r2, [pc, #72]	; (80012cc <_sbrk+0x68>)
 8001284:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001286:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <_sbrk+0x64>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	429a      	cmp	r2, r3
 8001292:	d207      	bcs.n	80012a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001294:	f002 ff04 	bl	80040a0 <__errno>
 8001298:	4603      	mov	r3, r0
 800129a:	220c      	movs	r2, #12
 800129c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800129e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012a2:	e009      	b.n	80012b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a4:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <_sbrk+0x64>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012aa:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <_sbrk+0x64>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	4a05      	ldr	r2, [pc, #20]	; (80012c8 <_sbrk+0x64>)
 80012b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012b6:	68fb      	ldr	r3, [r7, #12]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20008000 	.word	0x20008000
 80012c4:	00000400 	.word	0x00000400
 80012c8:	20000094 	.word	0x20000094
 80012cc:	200001a0 	.word	0x200001a0

080012d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <SystemInit+0x20>)
 80012d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012da:	4a05      	ldr	r2, [pc, #20]	; (80012f0 <SystemInit+0x20>)
 80012dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012f4:	480d      	ldr	r0, [pc, #52]	; (800132c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012f8:	480d      	ldr	r0, [pc, #52]	; (8001330 <LoopForever+0x6>)
  ldr r1, =_edata
 80012fa:	490e      	ldr	r1, [pc, #56]	; (8001334 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012fc:	4a0e      	ldr	r2, [pc, #56]	; (8001338 <LoopForever+0xe>)
  movs r3, #0
 80012fe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001300:	e002      	b.n	8001308 <LoopCopyDataInit>

08001302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001306:	3304      	adds	r3, #4

08001308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800130a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800130c:	d3f9      	bcc.n	8001302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800130e:	4a0b      	ldr	r2, [pc, #44]	; (800133c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001310:	4c0b      	ldr	r4, [pc, #44]	; (8001340 <LoopForever+0x16>)
  movs r3, #0
 8001312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001314:	e001      	b.n	800131a <LoopFillZerobss>

08001316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001318:	3204      	adds	r2, #4

0800131a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800131a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800131c:	d3fb      	bcc.n	8001316 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800131e:	f7ff ffd7 	bl	80012d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001322:	f002 fec3 	bl	80040ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001326:	f7ff fd47 	bl	8000db8 <main>

0800132a <LoopForever>:

LoopForever:
    b LoopForever
 800132a:	e7fe      	b.n	800132a <LoopForever>
  ldr   r0, =_estack
 800132c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001334:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001338:	08004a20 	.word	0x08004a20
  ldr r2, =_sbss
 800133c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001340:	2000019c 	.word	0x2000019c

08001344 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001344:	e7fe      	b.n	8001344 <ADC1_2_IRQHandler>

08001346 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800134c:	2300      	movs	r3, #0
 800134e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001350:	2003      	movs	r0, #3
 8001352:	f000 f93d 	bl	80015d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001356:	2000      	movs	r0, #0
 8001358:	f000 f80e 	bl	8001378 <HAL_InitTick>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d002      	beq.n	8001368 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	71fb      	strb	r3, [r7, #7]
 8001366:	e001      	b.n	800136c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001368:	f7ff fe7c 	bl	8001064 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800136c:	79fb      	ldrb	r3, [r7, #7]

}
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001380:	2300      	movs	r3, #0
 8001382:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001384:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <HAL_InitTick+0x68>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d022      	beq.n	80013d2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800138c:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <HAL_InitTick+0x6c>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <HAL_InitTick+0x68>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001398:	fbb1 f3f3 	udiv	r3, r1, r3
 800139c:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 f93a 	bl	800161a <HAL_SYSTICK_Config>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d10f      	bne.n	80013cc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b0f      	cmp	r3, #15
 80013b0:	d809      	bhi.n	80013c6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b2:	2200      	movs	r2, #0
 80013b4:	6879      	ldr	r1, [r7, #4]
 80013b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013ba:	f000 f914 	bl	80015e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013be:	4a0a      	ldr	r2, [pc, #40]	; (80013e8 <HAL_InitTick+0x70>)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	e007      	b.n	80013d6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	73fb      	strb	r3, [r7, #15]
 80013ca:	e004      	b.n	80013d6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	73fb      	strb	r3, [r7, #15]
 80013d0:	e001      	b.n	80013d6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000008 	.word	0x20000008
 80013e4:	20000000 	.word	0x20000000
 80013e8:	20000004 	.word	0x20000004

080013ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <HAL_IncTick+0x1c>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <HAL_IncTick+0x20>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4413      	add	r3, r2
 80013fa:	4a03      	ldr	r2, [pc, #12]	; (8001408 <HAL_IncTick+0x1c>)
 80013fc:	6013      	str	r3, [r2, #0]
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	20000188 	.word	0x20000188
 800140c:	20000008 	.word	0x20000008

08001410 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return uwTick;
 8001414:	4b03      	ldr	r3, [pc, #12]	; (8001424 <HAL_GetTick+0x14>)
 8001416:	681b      	ldr	r3, [r3, #0]
}
 8001418:	4618      	mov	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	20000188 	.word	0x20000188

08001428 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001430:	f7ff ffee 	bl	8001410 <HAL_GetTick>
 8001434:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001440:	d004      	beq.n	800144c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <HAL_Delay+0x40>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	4413      	add	r3, r2
 800144a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800144c:	bf00      	nop
 800144e:	f7ff ffdf 	bl	8001410 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	429a      	cmp	r2, r3
 800145c:	d8f7      	bhi.n	800144e <HAL_Delay+0x26>
  {
  }
}
 800145e:	bf00      	nop
 8001460:	bf00      	nop
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000008 	.word	0x20000008

0800146c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <__NVIC_SetPriorityGrouping+0x44>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001482:	68ba      	ldr	r2, [r7, #8]
 8001484:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001488:	4013      	ands	r3, r2
 800148a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001494:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800149c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800149e:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <__NVIC_SetPriorityGrouping+0x44>)
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	60d3      	str	r3, [r2, #12]
}
 80014a4:	bf00      	nop
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <__NVIC_GetPriorityGrouping+0x18>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	0a1b      	lsrs	r3, r3, #8
 80014be:	f003 0307 	and.w	r3, r3, #7
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	6039      	str	r1, [r7, #0]
 80014da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	db0a      	blt.n	80014fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	490c      	ldr	r1, [pc, #48]	; (800151c <__NVIC_SetPriority+0x4c>)
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	0112      	lsls	r2, r2, #4
 80014f0:	b2d2      	uxtb	r2, r2
 80014f2:	440b      	add	r3, r1
 80014f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f8:	e00a      	b.n	8001510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	4908      	ldr	r1, [pc, #32]	; (8001520 <__NVIC_SetPriority+0x50>)
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	f003 030f 	and.w	r3, r3, #15
 8001506:	3b04      	subs	r3, #4
 8001508:	0112      	lsls	r2, r2, #4
 800150a:	b2d2      	uxtb	r2, r2
 800150c:	440b      	add	r3, r1
 800150e:	761a      	strb	r2, [r3, #24]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	e000e100 	.word	0xe000e100
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001524:	b480      	push	{r7}
 8001526:	b089      	sub	sp, #36	; 0x24
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	f1c3 0307 	rsb	r3, r3, #7
 800153e:	2b04      	cmp	r3, #4
 8001540:	bf28      	it	cs
 8001542:	2304      	movcs	r3, #4
 8001544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	3304      	adds	r3, #4
 800154a:	2b06      	cmp	r3, #6
 800154c:	d902      	bls.n	8001554 <NVIC_EncodePriority+0x30>
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3b03      	subs	r3, #3
 8001552:	e000      	b.n	8001556 <NVIC_EncodePriority+0x32>
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001558:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43da      	mvns	r2, r3
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	401a      	ands	r2, r3
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800156c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	fa01 f303 	lsl.w	r3, r1, r3
 8001576:	43d9      	mvns	r1, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800157c:	4313      	orrs	r3, r2
         );
}
 800157e:	4618      	mov	r0, r3
 8001580:	3724      	adds	r7, #36	; 0x24
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
	...

0800158c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3b01      	subs	r3, #1
 8001598:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800159c:	d301      	bcc.n	80015a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800159e:	2301      	movs	r3, #1
 80015a0:	e00f      	b.n	80015c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015a2:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <SysTick_Config+0x40>)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015aa:	210f      	movs	r1, #15
 80015ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015b0:	f7ff ff8e 	bl	80014d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015b4:	4b05      	ldr	r3, [pc, #20]	; (80015cc <SysTick_Config+0x40>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ba:	4b04      	ldr	r3, [pc, #16]	; (80015cc <SysTick_Config+0x40>)
 80015bc:	2207      	movs	r2, #7
 80015be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	e000e010 	.word	0xe000e010

080015d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff ff47 	bl	800146c <__NVIC_SetPriorityGrouping>
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b086      	sub	sp, #24
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	4603      	mov	r3, r0
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	607a      	str	r2, [r7, #4]
 80015f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015f4:	f7ff ff5e 	bl	80014b4 <__NVIC_GetPriorityGrouping>
 80015f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	68b9      	ldr	r1, [r7, #8]
 80015fe:	6978      	ldr	r0, [r7, #20]
 8001600:	f7ff ff90 	bl	8001524 <NVIC_EncodePriority>
 8001604:	4602      	mov	r2, r0
 8001606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800160a:	4611      	mov	r1, r2
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff ff5f 	bl	80014d0 <__NVIC_SetPriority>
}
 8001612:	bf00      	nop
 8001614:	3718      	adds	r7, #24
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff ffb2 	bl	800158c <SysTick_Config>
 8001628:	4603      	mov	r3, r0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001634:	b480      	push	{r7}
 8001636:	b087      	sub	sp, #28
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001642:	e15a      	b.n	80018fa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	2101      	movs	r1, #1
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	fa01 f303 	lsl.w	r3, r1, r3
 8001650:	4013      	ands	r3, r2
 8001652:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 814c 	beq.w	80018f4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	2b01      	cmp	r3, #1
 8001666:	d005      	beq.n	8001674 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001670:	2b02      	cmp	r3, #2
 8001672:	d130      	bne.n	80016d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	2203      	movs	r2, #3
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	4013      	ands	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	68da      	ldr	r2, [r3, #12]
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	4313      	orrs	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016aa:	2201      	movs	r2, #1
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43db      	mvns	r3, r3
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	4013      	ands	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	091b      	lsrs	r3, r3, #4
 80016c0:	f003 0201 	and.w	r2, r3, #1
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	2b03      	cmp	r3, #3
 80016e0:	d017      	beq.n	8001712 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	2203      	movs	r2, #3
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	689a      	ldr	r2, [r3, #8]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	4313      	orrs	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f003 0303 	and.w	r3, r3, #3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d123      	bne.n	8001766 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	08da      	lsrs	r2, r3, #3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	3208      	adds	r2, #8
 8001726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800172a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	220f      	movs	r2, #15
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43db      	mvns	r3, r3
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	4013      	ands	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	691a      	ldr	r2, [r3, #16]
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	4313      	orrs	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	08da      	lsrs	r2, r3, #3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3208      	adds	r2, #8
 8001760:	6939      	ldr	r1, [r7, #16]
 8001762:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	2203      	movs	r2, #3
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	4013      	ands	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f003 0203 	and.w	r2, r3, #3
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4313      	orrs	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 80a6 	beq.w	80018f4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a8:	4b5b      	ldr	r3, [pc, #364]	; (8001918 <HAL_GPIO_Init+0x2e4>)
 80017aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ac:	4a5a      	ldr	r2, [pc, #360]	; (8001918 <HAL_GPIO_Init+0x2e4>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	6613      	str	r3, [r2, #96]	; 0x60
 80017b4:	4b58      	ldr	r3, [pc, #352]	; (8001918 <HAL_GPIO_Init+0x2e4>)
 80017b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017c0:	4a56      	ldr	r2, [pc, #344]	; (800191c <HAL_GPIO_Init+0x2e8>)
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	089b      	lsrs	r3, r3, #2
 80017c6:	3302      	adds	r3, #2
 80017c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	220f      	movs	r2, #15
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4013      	ands	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017ea:	d01f      	beq.n	800182c <HAL_GPIO_Init+0x1f8>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a4c      	ldr	r2, [pc, #304]	; (8001920 <HAL_GPIO_Init+0x2ec>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d019      	beq.n	8001828 <HAL_GPIO_Init+0x1f4>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a4b      	ldr	r2, [pc, #300]	; (8001924 <HAL_GPIO_Init+0x2f0>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d013      	beq.n	8001824 <HAL_GPIO_Init+0x1f0>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a4a      	ldr	r2, [pc, #296]	; (8001928 <HAL_GPIO_Init+0x2f4>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d00d      	beq.n	8001820 <HAL_GPIO_Init+0x1ec>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a49      	ldr	r2, [pc, #292]	; (800192c <HAL_GPIO_Init+0x2f8>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d007      	beq.n	800181c <HAL_GPIO_Init+0x1e8>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a48      	ldr	r2, [pc, #288]	; (8001930 <HAL_GPIO_Init+0x2fc>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d101      	bne.n	8001818 <HAL_GPIO_Init+0x1e4>
 8001814:	2305      	movs	r3, #5
 8001816:	e00a      	b.n	800182e <HAL_GPIO_Init+0x1fa>
 8001818:	2306      	movs	r3, #6
 800181a:	e008      	b.n	800182e <HAL_GPIO_Init+0x1fa>
 800181c:	2304      	movs	r3, #4
 800181e:	e006      	b.n	800182e <HAL_GPIO_Init+0x1fa>
 8001820:	2303      	movs	r3, #3
 8001822:	e004      	b.n	800182e <HAL_GPIO_Init+0x1fa>
 8001824:	2302      	movs	r3, #2
 8001826:	e002      	b.n	800182e <HAL_GPIO_Init+0x1fa>
 8001828:	2301      	movs	r3, #1
 800182a:	e000      	b.n	800182e <HAL_GPIO_Init+0x1fa>
 800182c:	2300      	movs	r3, #0
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	f002 0203 	and.w	r2, r2, #3
 8001834:	0092      	lsls	r2, r2, #2
 8001836:	4093      	lsls	r3, r2
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	4313      	orrs	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800183e:	4937      	ldr	r1, [pc, #220]	; (800191c <HAL_GPIO_Init+0x2e8>)
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	089b      	lsrs	r3, r3, #2
 8001844:	3302      	adds	r3, #2
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800184c:	4b39      	ldr	r3, [pc, #228]	; (8001934 <HAL_GPIO_Init+0x300>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	43db      	mvns	r3, r3
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	4013      	ands	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d003      	beq.n	8001870 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	4313      	orrs	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001870:	4a30      	ldr	r2, [pc, #192]	; (8001934 <HAL_GPIO_Init+0x300>)
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001876:	4b2f      	ldr	r3, [pc, #188]	; (8001934 <HAL_GPIO_Init+0x300>)
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	43db      	mvns	r3, r3
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4013      	ands	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4313      	orrs	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800189a:	4a26      	ldr	r2, [pc, #152]	; (8001934 <HAL_GPIO_Init+0x300>)
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80018a0:	4b24      	ldr	r3, [pc, #144]	; (8001934 <HAL_GPIO_Init+0x300>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	43db      	mvns	r3, r3
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	4013      	ands	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d003      	beq.n	80018c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018c4:	4a1b      	ldr	r2, [pc, #108]	; (8001934 <HAL_GPIO_Init+0x300>)
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018ca:	4b1a      	ldr	r3, [pc, #104]	; (8001934 <HAL_GPIO_Init+0x300>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	43db      	mvns	r3, r3
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	4013      	ands	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018ee:	4a11      	ldr	r2, [pc, #68]	; (8001934 <HAL_GPIO_Init+0x300>)
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	3301      	adds	r3, #1
 80018f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	fa22 f303 	lsr.w	r3, r2, r3
 8001904:	2b00      	cmp	r3, #0
 8001906:	f47f ae9d 	bne.w	8001644 <HAL_GPIO_Init+0x10>
  }
}
 800190a:	bf00      	nop
 800190c:	bf00      	nop
 800190e:	371c      	adds	r7, #28
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	40021000 	.word	0x40021000
 800191c:	40010000 	.word	0x40010000
 8001920:	48000400 	.word	0x48000400
 8001924:	48000800 	.word	0x48000800
 8001928:	48000c00 	.word	0x48000c00
 800192c:	48001000 	.word	0x48001000
 8001930:	48001400 	.word	0x48001400
 8001934:	40010400 	.word	0x40010400

08001938 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	460b      	mov	r3, r1
 8001942:	807b      	strh	r3, [r7, #2]
 8001944:	4613      	mov	r3, r2
 8001946:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001948:	787b      	ldrb	r3, [r7, #1]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800194e:	887a      	ldrh	r2, [r7, #2]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001954:	e002      	b.n	800195c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001956:	887a      	ldrh	r2, [r7, #2]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e081      	b.n	8001a7e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d106      	bne.n	8001994 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7ff fb8c 	bl	80010ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2224      	movs	r2, #36	; 0x24
 8001998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 0201 	bic.w	r2, r2, #1
 80019aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d107      	bne.n	80019e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689a      	ldr	r2, [r3, #8]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	e006      	b.n	80019f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689a      	ldr	r2, [r3, #8]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80019ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d104      	bne.n	8001a02 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	6812      	ldr	r2, [r2, #0]
 8001a0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	691a      	ldr	r2, [r3, #16]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69d9      	ldr	r1, [r3, #28]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a1a      	ldr	r2, [r3, #32]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f042 0201 	orr.w	r2, r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2220      	movs	r2, #32
 8001a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af02      	add	r7, sp, #8
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	607a      	str	r2, [r7, #4]
 8001a92:	461a      	mov	r2, r3
 8001a94:	460b      	mov	r3, r1
 8001a96:	817b      	strh	r3, [r7, #10]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b20      	cmp	r3, #32
 8001aa6:	f040 80da 	bne.w	8001c5e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d101      	bne.n	8001ab8 <HAL_I2C_Master_Transmit+0x30>
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	e0d3      	b.n	8001c60 <HAL_I2C_Master_Transmit+0x1d8>
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ac0:	f7ff fca6 	bl	8001410 <HAL_GetTick>
 8001ac4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	2319      	movs	r3, #25
 8001acc:	2201      	movs	r2, #1
 8001ace:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	f000 f9e6 	bl	8001ea4 <I2C_WaitOnFlagUntilTimeout>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e0be      	b.n	8001c60 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2221      	movs	r2, #33	; 0x21
 8001ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2210      	movs	r2, #16
 8001aee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2200      	movs	r2, #0
 8001af6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	893a      	ldrh	r2, [r7, #8]
 8001b02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2200      	movs	r2, #0
 8001b08:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	2bff      	cmp	r3, #255	; 0xff
 8001b12:	d90e      	bls.n	8001b32 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	22ff      	movs	r2, #255	; 0xff
 8001b18:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	8979      	ldrh	r1, [r7, #10]
 8001b22:	4b51      	ldr	r3, [pc, #324]	; (8001c68 <HAL_I2C_Master_Transmit+0x1e0>)
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f000 fbdc 	bl	80022e8 <I2C_TransferConfig>
 8001b30:	e06c      	b.n	8001c0c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	8979      	ldrh	r1, [r7, #10]
 8001b44:	4b48      	ldr	r3, [pc, #288]	; (8001c68 <HAL_I2C_Master_Transmit+0x1e0>)
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f000 fbcb 	bl	80022e8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001b52:	e05b      	b.n	8001c0c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	6a39      	ldr	r1, [r7, #32]
 8001b58:	68f8      	ldr	r0, [r7, #12]
 8001b5a:	f000 f9e3 	bl	8001f24 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e07b      	b.n	8001c60 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	781a      	ldrb	r2, [r3, #0]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b78:	1c5a      	adds	r2, r3, #1
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	3b01      	subs	r3, #1
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b90:	3b01      	subs	r3, #1
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d034      	beq.n	8001c0c <HAL_I2C_Master_Transmit+0x184>
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d130      	bne.n	8001c0c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	6a3b      	ldr	r3, [r7, #32]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2180      	movs	r1, #128	; 0x80
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f000 f975 	bl	8001ea4 <I2C_WaitOnFlagUntilTimeout>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e04d      	b.n	8001c60 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	2bff      	cmp	r3, #255	; 0xff
 8001bcc:	d90e      	bls.n	8001bec <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	22ff      	movs	r2, #255	; 0xff
 8001bd2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	8979      	ldrh	r1, [r7, #10]
 8001bdc:	2300      	movs	r3, #0
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f000 fb7f 	bl	80022e8 <I2C_TransferConfig>
 8001bea:	e00f      	b.n	8001c0c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	8979      	ldrh	r1, [r7, #10]
 8001bfe:	2300      	movs	r3, #0
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f000 fb6e 	bl	80022e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d19e      	bne.n	8001b54 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	6a39      	ldr	r1, [r7, #32]
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f000 f9c2 	bl	8001fa4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e01a      	b.n	8001c60 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2220      	movs	r2, #32
 8001c30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6859      	ldr	r1, [r3, #4]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <HAL_I2C_Master_Transmit+0x1e4>)
 8001c3e:	400b      	ands	r3, r1
 8001c40:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2220      	movs	r2, #32
 8001c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	e000      	b.n	8001c60 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001c5e:	2302      	movs	r3, #2
  }
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	80002000 	.word	0x80002000
 8001c6c:	fe00e800 	.word	0xfe00e800

08001c70 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b088      	sub	sp, #32
 8001c74:	af02      	add	r7, sp, #8
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	607a      	str	r2, [r7, #4]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	817b      	strh	r3, [r7, #10]
 8001c80:	4613      	mov	r3, r2
 8001c82:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b20      	cmp	r3, #32
 8001c8e:	f040 80db 	bne.w	8001e48 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d101      	bne.n	8001ca0 <HAL_I2C_Master_Receive+0x30>
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	e0d4      	b.n	8001e4a <HAL_I2C_Master_Receive+0x1da>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ca8:	f7ff fbb2 	bl	8001410 <HAL_GetTick>
 8001cac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	2319      	movs	r3, #25
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cba:	68f8      	ldr	r0, [r7, #12]
 8001cbc:	f000 f8f2 	bl	8001ea4 <I2C_WaitOnFlagUntilTimeout>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e0bf      	b.n	8001e4a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2222      	movs	r2, #34	; 0x22
 8001cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2210      	movs	r2, #16
 8001cd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	893a      	ldrh	r2, [r7, #8]
 8001cea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	2bff      	cmp	r3, #255	; 0xff
 8001cfa:	d90e      	bls.n	8001d1a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	22ff      	movs	r2, #255	; 0xff
 8001d00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	8979      	ldrh	r1, [r7, #10]
 8001d0a:	4b52      	ldr	r3, [pc, #328]	; (8001e54 <HAL_I2C_Master_Receive+0x1e4>)
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	f000 fae8 	bl	80022e8 <I2C_TransferConfig>
 8001d18:	e06d      	b.n	8001df6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	8979      	ldrh	r1, [r7, #10]
 8001d2c:	4b49      	ldr	r3, [pc, #292]	; (8001e54 <HAL_I2C_Master_Receive+0x1e4>)
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	f000 fad7 	bl	80022e8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001d3a:	e05c      	b.n	8001df6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	6a39      	ldr	r1, [r7, #32]
 8001d40:	68f8      	ldr	r0, [r7, #12]
 8001d42:	f000 f96b 	bl	800201c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e07c      	b.n	8001e4a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d62:	1c5a      	adds	r2, r3, #1
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d034      	beq.n	8001df6 <HAL_I2C_Master_Receive+0x186>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d130      	bne.n	8001df6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2180      	movs	r1, #128	; 0x80
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f000 f880 	bl	8001ea4 <I2C_WaitOnFlagUntilTimeout>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e04d      	b.n	8001e4a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	2bff      	cmp	r3, #255	; 0xff
 8001db6:	d90e      	bls.n	8001dd6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	22ff      	movs	r2, #255	; 0xff
 8001dbc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	8979      	ldrh	r1, [r7, #10]
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	9300      	str	r3, [sp, #0]
 8001dca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f000 fa8a 	bl	80022e8 <I2C_TransferConfig>
 8001dd4:	e00f      	b.n	8001df6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	8979      	ldrh	r1, [r7, #10]
 8001de8:	2300      	movs	r3, #0
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f000 fa79 	bl	80022e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d19d      	bne.n	8001d3c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e00:	697a      	ldr	r2, [r7, #20]
 8001e02:	6a39      	ldr	r1, [r7, #32]
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	f000 f8cd 	bl	8001fa4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e01a      	b.n	8001e4a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2220      	movs	r2, #32
 8001e1a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6859      	ldr	r1, [r3, #4]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <HAL_I2C_Master_Receive+0x1e8>)
 8001e28:	400b      	ands	r3, r1
 8001e2a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2220      	movs	r2, #32
 8001e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e44:	2300      	movs	r3, #0
 8001e46:	e000      	b.n	8001e4a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001e48:	2302      	movs	r3, #2
  }
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	80002400 	.word	0x80002400
 8001e58:	fe00e800 	.word	0xfe00e800

08001e5c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d103      	bne.n	8001e7a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2200      	movs	r2, #0
 8001e78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d007      	beq.n	8001e98 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	699a      	ldr	r2, [r3, #24]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 0201 	orr.w	r2, r2, #1
 8001e96:	619a      	str	r2, [r3, #24]
  }
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	603b      	str	r3, [r7, #0]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001eb4:	e022      	b.n	8001efc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ebc:	d01e      	beq.n	8001efc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ebe:	f7ff faa7 	bl	8001410 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d302      	bcc.n	8001ed4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d113      	bne.n	8001efc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed8:	f043 0220 	orr.w	r2, r3, #32
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2220      	movs	r2, #32
 8001ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e00f      	b.n	8001f1c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	699a      	ldr	r2, [r3, #24]
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	4013      	ands	r3, r2
 8001f06:	68ba      	ldr	r2, [r7, #8]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	bf0c      	ite	eq
 8001f0c:	2301      	moveq	r3, #1
 8001f0e:	2300      	movne	r3, #0
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	461a      	mov	r2, r3
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d0cd      	beq.n	8001eb6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f30:	e02c      	b.n	8001f8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	68b9      	ldr	r1, [r7, #8]
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f000 f8ea 	bl	8002110 <I2C_IsErrorOccurred>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e02a      	b.n	8001f9c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f4c:	d01e      	beq.n	8001f8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f4e:	f7ff fa5f 	bl	8001410 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	68ba      	ldr	r2, [r7, #8]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d302      	bcc.n	8001f64 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d113      	bne.n	8001f8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f68:	f043 0220 	orr.w	r2, r3, #32
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2220      	movs	r2, #32
 8001f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e007      	b.n	8001f9c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d1cb      	bne.n	8001f32 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fb0:	e028      	b.n	8002004 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	68b9      	ldr	r1, [r7, #8]
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f000 f8aa 	bl	8002110 <I2C_IsErrorOccurred>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e026      	b.n	8002014 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fc6:	f7ff fa23 	bl	8001410 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	68ba      	ldr	r2, [r7, #8]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d302      	bcc.n	8001fdc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d113      	bne.n	8002004 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe0:	f043 0220 	orr.w	r2, r3, #32
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2220      	movs	r2, #32
 8001fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e007      	b.n	8002014 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	f003 0320 	and.w	r3, r3, #32
 800200e:	2b20      	cmp	r3, #32
 8002010:	d1cf      	bne.n	8001fb2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002028:	e064      	b.n	80020f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	68b9      	ldr	r1, [r7, #8]
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 f86e 	bl	8002110 <I2C_IsErrorOccurred>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e062      	b.n	8002104 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	f003 0320 	and.w	r3, r3, #32
 8002048:	2b20      	cmp	r3, #32
 800204a:	d138      	bne.n	80020be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	f003 0304 	and.w	r3, r3, #4
 8002056:	2b04      	cmp	r3, #4
 8002058:	d105      	bne.n	8002066 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002062:	2300      	movs	r3, #0
 8002064:	e04e      	b.n	8002104 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	f003 0310 	and.w	r3, r3, #16
 8002070:	2b10      	cmp	r3, #16
 8002072:	d107      	bne.n	8002084 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2210      	movs	r2, #16
 800207a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2204      	movs	r2, #4
 8002080:	645a      	str	r2, [r3, #68]	; 0x44
 8002082:	e002      	b.n	800208a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2220      	movs	r2, #32
 8002090:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6859      	ldr	r1, [r3, #4]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	4b1b      	ldr	r3, [pc, #108]	; (800210c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800209e:	400b      	ands	r3, r1
 80020a0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2220      	movs	r2, #32
 80020a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e022      	b.n	8002104 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020be:	f7ff f9a7 	bl	8001410 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	68ba      	ldr	r2, [r7, #8]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d302      	bcc.n	80020d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10f      	bne.n	80020f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d8:	f043 0220 	orr.w	r2, r3, #32
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2220      	movs	r2, #32
 80020e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e007      	b.n	8002104 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	f003 0304 	and.w	r3, r3, #4
 80020fe:	2b04      	cmp	r3, #4
 8002100:	d193      	bne.n	800202a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	fe00e800 	.word	0xfe00e800

08002110 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b08a      	sub	sp, #40	; 0x28
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800211c:	2300      	movs	r3, #0
 800211e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800212a:	2300      	movs	r3, #0
 800212c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	2b00      	cmp	r3, #0
 800213a:	d075      	beq.n	8002228 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2210      	movs	r2, #16
 8002142:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002144:	e056      	b.n	80021f4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800214c:	d052      	beq.n	80021f4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800214e:	f7ff f95f 	bl	8001410 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	68ba      	ldr	r2, [r7, #8]
 800215a:	429a      	cmp	r2, r3
 800215c:	d302      	bcc.n	8002164 <I2C_IsErrorOccurred+0x54>
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d147      	bne.n	80021f4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800216e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002176:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002182:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002186:	d12e      	bne.n	80021e6 <I2C_IsErrorOccurred+0xd6>
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800218e:	d02a      	beq.n	80021e6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002190:	7cfb      	ldrb	r3, [r7, #19]
 8002192:	2b20      	cmp	r3, #32
 8002194:	d027      	beq.n	80021e6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021a4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80021a6:	f7ff f933 	bl	8001410 <HAL_GetTick>
 80021aa:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021ac:	e01b      	b.n	80021e6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80021ae:	f7ff f92f 	bl	8001410 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b19      	cmp	r3, #25
 80021ba:	d914      	bls.n	80021e6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c0:	f043 0220 	orr.w	r2, r3, #32
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2220      	movs	r2, #32
 80021cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	f003 0320 	and.w	r3, r3, #32
 80021f0:	2b20      	cmp	r3, #32
 80021f2:	d1dc      	bne.n	80021ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	f003 0320 	and.w	r3, r3, #32
 80021fe:	2b20      	cmp	r3, #32
 8002200:	d003      	beq.n	800220a <I2C_IsErrorOccurred+0xfa>
 8002202:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002206:	2b00      	cmp	r3, #0
 8002208:	d09d      	beq.n	8002146 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800220a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800220e:	2b00      	cmp	r3, #0
 8002210:	d103      	bne.n	800221a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2220      	movs	r2, #32
 8002218:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800221a:	6a3b      	ldr	r3, [r7, #32]
 800221c:	f043 0304 	orr.w	r3, r3, #4
 8002220:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00b      	beq.n	8002252 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800223a:	6a3b      	ldr	r3, [r7, #32]
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f44f 7280 	mov.w	r2, #256	; 0x100
 800224a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00b      	beq.n	8002274 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800225c:	6a3b      	ldr	r3, [r7, #32]
 800225e:	f043 0308 	orr.w	r3, r3, #8
 8002262:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800226c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00b      	beq.n	8002296 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800227e:	6a3b      	ldr	r3, [r7, #32]
 8002280:	f043 0302 	orr.w	r3, r3, #2
 8002284:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800228e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002296:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800229a:	2b00      	cmp	r3, #0
 800229c:	d01c      	beq.n	80022d8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f7ff fddc 	bl	8001e5c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6859      	ldr	r1, [r3, #4]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	4b0d      	ldr	r3, [pc, #52]	; (80022e4 <I2C_IsErrorOccurred+0x1d4>)
 80022b0:	400b      	ands	r3, r1
 80022b2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022b8:	6a3b      	ldr	r3, [r7, #32]
 80022ba:	431a      	orrs	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2220      	movs	r2, #32
 80022c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80022d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3728      	adds	r7, #40	; 0x28
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	fe00e800 	.word	0xfe00e800

080022e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b087      	sub	sp, #28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	607b      	str	r3, [r7, #4]
 80022f2:	460b      	mov	r3, r1
 80022f4:	817b      	strh	r3, [r7, #10]
 80022f6:	4613      	mov	r3, r2
 80022f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80022fa:	897b      	ldrh	r3, [r7, #10]
 80022fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002300:	7a7b      	ldrb	r3, [r7, #9]
 8002302:	041b      	lsls	r3, r3, #16
 8002304:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002308:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800230e:	6a3b      	ldr	r3, [r7, #32]
 8002310:	4313      	orrs	r3, r2
 8002312:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002316:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	6a3b      	ldr	r3, [r7, #32]
 8002320:	0d5b      	lsrs	r3, r3, #21
 8002322:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002326:	4b08      	ldr	r3, [pc, #32]	; (8002348 <I2C_TransferConfig+0x60>)
 8002328:	430b      	orrs	r3, r1
 800232a:	43db      	mvns	r3, r3
 800232c:	ea02 0103 	and.w	r1, r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	430a      	orrs	r2, r1
 8002338:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800233a:	bf00      	nop
 800233c:	371c      	adds	r7, #28
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	03ff63ff 	.word	0x03ff63ff

0800234c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b20      	cmp	r3, #32
 8002360:	d138      	bne.n	80023d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002368:	2b01      	cmp	r3, #1
 800236a:	d101      	bne.n	8002370 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800236c:	2302      	movs	r3, #2
 800236e:	e032      	b.n	80023d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2224      	movs	r2, #36	; 0x24
 800237c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 0201 	bic.w	r2, r2, #1
 800238e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800239e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6819      	ldr	r1, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 0201 	orr.w	r2, r2, #1
 80023be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2220      	movs	r2, #32
 80023c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023d0:	2300      	movs	r3, #0
 80023d2:	e000      	b.n	80023d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80023d4:	2302      	movs	r3, #2
  }
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b085      	sub	sp, #20
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
 80023ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b20      	cmp	r3, #32
 80023f6:	d139      	bne.n	800246c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d101      	bne.n	8002406 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002402:	2302      	movs	r3, #2
 8002404:	e033      	b.n	800246e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2224      	movs	r2, #36	; 0x24
 8002412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 0201 	bic.w	r2, r2, #1
 8002424:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002434:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	021b      	lsls	r3, r3, #8
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	4313      	orrs	r3, r2
 800243e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0201 	orr.w	r2, r2, #1
 8002456:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2220      	movs	r2, #32
 800245c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002468:	2300      	movs	r3, #0
 800246a:	e000      	b.n	800246e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800246c:	2302      	movs	r3, #2
  }
}
 800246e:	4618      	mov	r0, r3
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
	...

0800247c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d141      	bne.n	800250e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800248a:	4b4b      	ldr	r3, [pc, #300]	; (80025b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002496:	d131      	bne.n	80024fc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002498:	4b47      	ldr	r3, [pc, #284]	; (80025b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800249a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800249e:	4a46      	ldr	r2, [pc, #280]	; (80025b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024a8:	4b43      	ldr	r3, [pc, #268]	; (80025b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024b0:	4a41      	ldr	r2, [pc, #260]	; (80025b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80024b8:	4b40      	ldr	r3, [pc, #256]	; (80025bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2232      	movs	r2, #50	; 0x32
 80024be:	fb02 f303 	mul.w	r3, r2, r3
 80024c2:	4a3f      	ldr	r2, [pc, #252]	; (80025c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80024c4:	fba2 2303 	umull	r2, r3, r2, r3
 80024c8:	0c9b      	lsrs	r3, r3, #18
 80024ca:	3301      	adds	r3, #1
 80024cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024ce:	e002      	b.n	80024d6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024d6:	4b38      	ldr	r3, [pc, #224]	; (80025b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024e2:	d102      	bne.n	80024ea <HAL_PWREx_ControlVoltageScaling+0x6e>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f2      	bne.n	80024d0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024ea:	4b33      	ldr	r3, [pc, #204]	; (80025b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024f6:	d158      	bne.n	80025aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e057      	b.n	80025ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80024fc:	4b2e      	ldr	r3, [pc, #184]	; (80025b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80024fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002502:	4a2d      	ldr	r2, [pc, #180]	; (80025b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002508:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800250c:	e04d      	b.n	80025aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002514:	d141      	bne.n	800259a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002516:	4b28      	ldr	r3, [pc, #160]	; (80025b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800251e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002522:	d131      	bne.n	8002588 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002524:	4b24      	ldr	r3, [pc, #144]	; (80025b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002526:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800252a:	4a23      	ldr	r2, [pc, #140]	; (80025b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800252c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002530:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002534:	4b20      	ldr	r3, [pc, #128]	; (80025b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800253c:	4a1e      	ldr	r2, [pc, #120]	; (80025b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800253e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002542:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002544:	4b1d      	ldr	r3, [pc, #116]	; (80025bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2232      	movs	r2, #50	; 0x32
 800254a:	fb02 f303 	mul.w	r3, r2, r3
 800254e:	4a1c      	ldr	r2, [pc, #112]	; (80025c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002550:	fba2 2303 	umull	r2, r3, r2, r3
 8002554:	0c9b      	lsrs	r3, r3, #18
 8002556:	3301      	adds	r3, #1
 8002558:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800255a:	e002      	b.n	8002562 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	3b01      	subs	r3, #1
 8002560:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002562:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800256a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800256e:	d102      	bne.n	8002576 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f2      	bne.n	800255c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002576:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800257e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002582:	d112      	bne.n	80025aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e011      	b.n	80025ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800258a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800258e:	4a0a      	ldr	r2, [pc, #40]	; (80025b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002594:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002598:	e007      	b.n	80025aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800259a:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025a2:	4a05      	ldr	r2, [pc, #20]	; (80025b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025a8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	40007000 	.word	0x40007000
 80025bc:	20000000 	.word	0x20000000
 80025c0:	431bde83 	.word	0x431bde83

080025c4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80025c8:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	4a04      	ldr	r2, [pc, #16]	; (80025e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80025ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025d2:	6093      	str	r3, [r2, #8]
}
 80025d4:	bf00      	nop
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	40007000 	.word	0x40007000

080025e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e308      	b.n	8002c08 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d075      	beq.n	80026ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002602:	4ba3      	ldr	r3, [pc, #652]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 030c 	and.w	r3, r3, #12
 800260a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800260c:	4ba0      	ldr	r3, [pc, #640]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	2b0c      	cmp	r3, #12
 800261a:	d102      	bne.n	8002622 <HAL_RCC_OscConfig+0x3e>
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	2b03      	cmp	r3, #3
 8002620:	d002      	beq.n	8002628 <HAL_RCC_OscConfig+0x44>
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	2b08      	cmp	r3, #8
 8002626:	d10b      	bne.n	8002640 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002628:	4b99      	ldr	r3, [pc, #612]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d05b      	beq.n	80026ec <HAL_RCC_OscConfig+0x108>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d157      	bne.n	80026ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e2e3      	b.n	8002c08 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002648:	d106      	bne.n	8002658 <HAL_RCC_OscConfig+0x74>
 800264a:	4b91      	ldr	r3, [pc, #580]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a90      	ldr	r2, [pc, #576]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 8002650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	e01d      	b.n	8002694 <HAL_RCC_OscConfig+0xb0>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002660:	d10c      	bne.n	800267c <HAL_RCC_OscConfig+0x98>
 8002662:	4b8b      	ldr	r3, [pc, #556]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a8a      	ldr	r2, [pc, #552]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 8002668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	4b88      	ldr	r3, [pc, #544]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a87      	ldr	r2, [pc, #540]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 8002674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	e00b      	b.n	8002694 <HAL_RCC_OscConfig+0xb0>
 800267c:	4b84      	ldr	r3, [pc, #528]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a83      	ldr	r2, [pc, #524]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 8002682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	4b81      	ldr	r3, [pc, #516]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a80      	ldr	r2, [pc, #512]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 800268e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002692:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d013      	beq.n	80026c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269c:	f7fe feb8 	bl	8001410 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026a4:	f7fe feb4 	bl	8001410 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b64      	cmp	r3, #100	; 0x64
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e2a8      	b.n	8002c08 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026b6:	4b76      	ldr	r3, [pc, #472]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0f0      	beq.n	80026a4 <HAL_RCC_OscConfig+0xc0>
 80026c2:	e014      	b.n	80026ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c4:	f7fe fea4 	bl	8001410 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026cc:	f7fe fea0 	bl	8001410 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b64      	cmp	r3, #100	; 0x64
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e294      	b.n	8002c08 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026de:	4b6c      	ldr	r3, [pc, #432]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0xe8>
 80026ea:	e000      	b.n	80026ee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d075      	beq.n	80027e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026fa:	4b65      	ldr	r3, [pc, #404]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 030c 	and.w	r3, r3, #12
 8002702:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002704:	4b62      	ldr	r3, [pc, #392]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f003 0303 	and.w	r3, r3, #3
 800270c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	2b0c      	cmp	r3, #12
 8002712:	d102      	bne.n	800271a <HAL_RCC_OscConfig+0x136>
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d002      	beq.n	8002720 <HAL_RCC_OscConfig+0x13c>
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	2b04      	cmp	r3, #4
 800271e:	d11f      	bne.n	8002760 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002720:	4b5b      	ldr	r3, [pc, #364]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002728:	2b00      	cmp	r3, #0
 800272a:	d005      	beq.n	8002738 <HAL_RCC_OscConfig+0x154>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e267      	b.n	8002c08 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002738:	4b55      	ldr	r3, [pc, #340]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	061b      	lsls	r3, r3, #24
 8002746:	4952      	ldr	r1, [pc, #328]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 8002748:	4313      	orrs	r3, r2
 800274a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800274c:	4b51      	ldr	r3, [pc, #324]	; (8002894 <HAL_RCC_OscConfig+0x2b0>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f7fe fe11 	bl	8001378 <HAL_InitTick>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d043      	beq.n	80027e4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e253      	b.n	8002c08 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d023      	beq.n	80027b0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002768:	4b49      	ldr	r3, [pc, #292]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a48      	ldr	r2, [pc, #288]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 800276e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002772:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002774:	f7fe fe4c 	bl	8001410 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800277c:	f7fe fe48 	bl	8001410 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e23c      	b.n	8002c08 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800278e:	4b40      	ldr	r3, [pc, #256]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0f0      	beq.n	800277c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800279a:	4b3d      	ldr	r3, [pc, #244]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	061b      	lsls	r3, r3, #24
 80027a8:	4939      	ldr	r1, [pc, #228]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	604b      	str	r3, [r1, #4]
 80027ae:	e01a      	b.n	80027e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027b0:	4b37      	ldr	r3, [pc, #220]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a36      	ldr	r2, [pc, #216]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 80027b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027bc:	f7fe fe28 	bl	8001410 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027c4:	f7fe fe24 	bl	8001410 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e218      	b.n	8002c08 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027d6:	4b2e      	ldr	r3, [pc, #184]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f0      	bne.n	80027c4 <HAL_RCC_OscConfig+0x1e0>
 80027e2:	e000      	b.n	80027e6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d03c      	beq.n	800286c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d01c      	beq.n	8002834 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027fa:	4b25      	ldr	r3, [pc, #148]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 80027fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002800:	4a23      	ldr	r2, [pc, #140]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 8002802:	f043 0301 	orr.w	r3, r3, #1
 8002806:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800280a:	f7fe fe01 	bl	8001410 <HAL_GetTick>
 800280e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002810:	e008      	b.n	8002824 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002812:	f7fe fdfd 	bl	8001410 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e1f1      	b.n	8002c08 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002824:	4b1a      	ldr	r3, [pc, #104]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 8002826:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d0ef      	beq.n	8002812 <HAL_RCC_OscConfig+0x22e>
 8002832:	e01b      	b.n	800286c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002834:	4b16      	ldr	r3, [pc, #88]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 8002836:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800283a:	4a15      	ldr	r2, [pc, #84]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 800283c:	f023 0301 	bic.w	r3, r3, #1
 8002840:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002844:	f7fe fde4 	bl	8001410 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800284c:	f7fe fde0 	bl	8001410 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e1d4      	b.n	8002c08 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800285e:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 8002860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1ef      	bne.n	800284c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 80ab 	beq.w	80029d0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800287a:	2300      	movs	r3, #0
 800287c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800287e:	4b04      	ldr	r3, [pc, #16]	; (8002890 <HAL_RCC_OscConfig+0x2ac>)
 8002880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d106      	bne.n	8002898 <HAL_RCC_OscConfig+0x2b4>
 800288a:	2301      	movs	r3, #1
 800288c:	e005      	b.n	800289a <HAL_RCC_OscConfig+0x2b6>
 800288e:	bf00      	nop
 8002890:	40021000 	.word	0x40021000
 8002894:	20000004 	.word	0x20000004
 8002898:	2300      	movs	r3, #0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00d      	beq.n	80028ba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800289e:	4baf      	ldr	r3, [pc, #700]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 80028a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a2:	4aae      	ldr	r2, [pc, #696]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 80028a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a8:	6593      	str	r3, [r2, #88]	; 0x58
 80028aa:	4bac      	ldr	r3, [pc, #688]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 80028ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80028b6:	2301      	movs	r3, #1
 80028b8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028ba:	4ba9      	ldr	r3, [pc, #676]	; (8002b60 <HAL_RCC_OscConfig+0x57c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d118      	bne.n	80028f8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028c6:	4ba6      	ldr	r3, [pc, #664]	; (8002b60 <HAL_RCC_OscConfig+0x57c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4aa5      	ldr	r2, [pc, #660]	; (8002b60 <HAL_RCC_OscConfig+0x57c>)
 80028cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028d2:	f7fe fd9d 	bl	8001410 <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028da:	f7fe fd99 	bl	8001410 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e18d      	b.n	8002c08 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028ec:	4b9c      	ldr	r3, [pc, #624]	; (8002b60 <HAL_RCC_OscConfig+0x57c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0f0      	beq.n	80028da <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d108      	bne.n	8002912 <HAL_RCC_OscConfig+0x32e>
 8002900:	4b96      	ldr	r3, [pc, #600]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002906:	4a95      	ldr	r2, [pc, #596]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002910:	e024      	b.n	800295c <HAL_RCC_OscConfig+0x378>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	2b05      	cmp	r3, #5
 8002918:	d110      	bne.n	800293c <HAL_RCC_OscConfig+0x358>
 800291a:	4b90      	ldr	r3, [pc, #576]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 800291c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002920:	4a8e      	ldr	r2, [pc, #568]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002922:	f043 0304 	orr.w	r3, r3, #4
 8002926:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800292a:	4b8c      	ldr	r3, [pc, #560]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 800292c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002930:	4a8a      	ldr	r2, [pc, #552]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800293a:	e00f      	b.n	800295c <HAL_RCC_OscConfig+0x378>
 800293c:	4b87      	ldr	r3, [pc, #540]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 800293e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002942:	4a86      	ldr	r2, [pc, #536]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002944:	f023 0301 	bic.w	r3, r3, #1
 8002948:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800294c:	4b83      	ldr	r3, [pc, #524]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 800294e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002952:	4a82      	ldr	r2, [pc, #520]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002954:	f023 0304 	bic.w	r3, r3, #4
 8002958:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d016      	beq.n	8002992 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002964:	f7fe fd54 	bl	8001410 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800296a:	e00a      	b.n	8002982 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800296c:	f7fe fd50 	bl	8001410 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	f241 3288 	movw	r2, #5000	; 0x1388
 800297a:	4293      	cmp	r3, r2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e142      	b.n	8002c08 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002982:	4b76      	ldr	r3, [pc, #472]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0ed      	beq.n	800296c <HAL_RCC_OscConfig+0x388>
 8002990:	e015      	b.n	80029be <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002992:	f7fe fd3d 	bl	8001410 <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002998:	e00a      	b.n	80029b0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800299a:	f7fe fd39 	bl	8001410 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e12b      	b.n	8002c08 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029b0:	4b6a      	ldr	r3, [pc, #424]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 80029b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1ed      	bne.n	800299a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029be:	7ffb      	ldrb	r3, [r7, #31]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d105      	bne.n	80029d0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029c4:	4b65      	ldr	r3, [pc, #404]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 80029c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c8:	4a64      	ldr	r2, [pc, #400]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 80029ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0320 	and.w	r3, r3, #32
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d03c      	beq.n	8002a56 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d01c      	beq.n	8002a1e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029e4:	4b5d      	ldr	r3, [pc, #372]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 80029e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029ea:	4a5c      	ldr	r2, [pc, #368]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f4:	f7fe fd0c 	bl	8001410 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029fc:	f7fe fd08 	bl	8001410 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e0fc      	b.n	8002c08 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a0e:	4b53      	ldr	r3, [pc, #332]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002a10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0ef      	beq.n	80029fc <HAL_RCC_OscConfig+0x418>
 8002a1c:	e01b      	b.n	8002a56 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a1e:	4b4f      	ldr	r3, [pc, #316]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002a20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a24:	4a4d      	ldr	r2, [pc, #308]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002a26:	f023 0301 	bic.w	r3, r3, #1
 8002a2a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2e:	f7fe fcef 	bl	8001410 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a36:	f7fe fceb 	bl	8001410 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e0df      	b.n	8002c08 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a48:	4b44      	ldr	r3, [pc, #272]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002a4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1ef      	bne.n	8002a36 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 80d3 	beq.w	8002c06 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a60:	4b3e      	ldr	r3, [pc, #248]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 030c 	and.w	r3, r3, #12
 8002a68:	2b0c      	cmp	r3, #12
 8002a6a:	f000 808d 	beq.w	8002b88 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d15a      	bne.n	8002b2c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a76:	4b39      	ldr	r3, [pc, #228]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a38      	ldr	r2, [pc, #224]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002a7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a82:	f7fe fcc5 	bl	8001410 <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a8a:	f7fe fcc1 	bl	8001410 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e0b5      	b.n	8002c08 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a9c:	4b2f      	ldr	r3, [pc, #188]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1f0      	bne.n	8002a8a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aa8:	4b2c      	ldr	r3, [pc, #176]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	4b2d      	ldr	r3, [pc, #180]	; (8002b64 <HAL_RCC_OscConfig+0x580>)
 8002aae:	4013      	ands	r3, r2
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6a11      	ldr	r1, [r2, #32]
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ab8:	3a01      	subs	r2, #1
 8002aba:	0112      	lsls	r2, r2, #4
 8002abc:	4311      	orrs	r1, r2
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002ac2:	0212      	lsls	r2, r2, #8
 8002ac4:	4311      	orrs	r1, r2
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002aca:	0852      	lsrs	r2, r2, #1
 8002acc:	3a01      	subs	r2, #1
 8002ace:	0552      	lsls	r2, r2, #21
 8002ad0:	4311      	orrs	r1, r2
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ad6:	0852      	lsrs	r2, r2, #1
 8002ad8:	3a01      	subs	r2, #1
 8002ada:	0652      	lsls	r2, r2, #25
 8002adc:	4311      	orrs	r1, r2
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002ae2:	06d2      	lsls	r2, r2, #27
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	491d      	ldr	r1, [pc, #116]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aec:	4b1b      	ldr	r3, [pc, #108]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a1a      	ldr	r2, [pc, #104]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002af2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002af6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002af8:	4b18      	ldr	r3, [pc, #96]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	4a17      	ldr	r2, [pc, #92]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002afe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b02:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b04:	f7fe fc84 	bl	8001410 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b0c:	f7fe fc80 	bl	8001410 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e074      	b.n	8002c08 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b1e:	4b0f      	ldr	r3, [pc, #60]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0f0      	beq.n	8002b0c <HAL_RCC_OscConfig+0x528>
 8002b2a:	e06c      	b.n	8002c06 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b2c:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a0a      	ldr	r2, [pc, #40]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002b32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b36:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002b38:	4b08      	ldr	r3, [pc, #32]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	4a07      	ldr	r2, [pc, #28]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002b3e:	f023 0303 	bic.w	r3, r3, #3
 8002b42:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002b44:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	4a04      	ldr	r2, [pc, #16]	; (8002b5c <HAL_RCC_OscConfig+0x578>)
 8002b4a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b52:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b54:	f7fe fc5c 	bl	8001410 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b5a:	e00e      	b.n	8002b7a <HAL_RCC_OscConfig+0x596>
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	40007000 	.word	0x40007000
 8002b64:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b68:	f7fe fc52 	bl	8001410 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e046      	b.n	8002c08 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b7a:	4b25      	ldr	r3, [pc, #148]	; (8002c10 <HAL_RCC_OscConfig+0x62c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f0      	bne.n	8002b68 <HAL_RCC_OscConfig+0x584>
 8002b86:	e03e      	b.n	8002c06 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e039      	b.n	8002c08 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002b94:	4b1e      	ldr	r3, [pc, #120]	; (8002c10 <HAL_RCC_OscConfig+0x62c>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	f003 0203 	and.w	r2, r3, #3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d12c      	bne.n	8002c02 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d123      	bne.n	8002c02 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d11b      	bne.n	8002c02 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d113      	bne.n	8002c02 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be4:	085b      	lsrs	r3, r3, #1
 8002be6:	3b01      	subs	r3, #1
 8002be8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d109      	bne.n	8002c02 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf8:	085b      	lsrs	r3, r3, #1
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d001      	beq.n	8002c06 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e000      	b.n	8002c08 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3720      	adds	r7, #32
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40021000 	.word	0x40021000

08002c14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e11e      	b.n	8002e6a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c2c:	4b91      	ldr	r3, [pc, #580]	; (8002e74 <HAL_RCC_ClockConfig+0x260>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 030f 	and.w	r3, r3, #15
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d910      	bls.n	8002c5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3a:	4b8e      	ldr	r3, [pc, #568]	; (8002e74 <HAL_RCC_ClockConfig+0x260>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f023 020f 	bic.w	r2, r3, #15
 8002c42:	498c      	ldr	r1, [pc, #560]	; (8002e74 <HAL_RCC_ClockConfig+0x260>)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4a:	4b8a      	ldr	r3, [pc, #552]	; (8002e74 <HAL_RCC_ClockConfig+0x260>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d001      	beq.n	8002c5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e106      	b.n	8002e6a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d073      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2b03      	cmp	r3, #3
 8002c6e:	d129      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c70:	4b81      	ldr	r3, [pc, #516]	; (8002e78 <HAL_RCC_ClockConfig+0x264>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0f4      	b.n	8002e6a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002c80:	f000 f99e 	bl	8002fc0 <RCC_GetSysClockFreqFromPLLSource>
 8002c84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4a7c      	ldr	r2, [pc, #496]	; (8002e7c <HAL_RCC_ClockConfig+0x268>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d93f      	bls.n	8002d0e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002c8e:	4b7a      	ldr	r3, [pc, #488]	; (8002e78 <HAL_RCC_ClockConfig+0x264>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d009      	beq.n	8002cae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d033      	beq.n	8002d0e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d12f      	bne.n	8002d0e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002cae:	4b72      	ldr	r3, [pc, #456]	; (8002e78 <HAL_RCC_ClockConfig+0x264>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cb6:	4a70      	ldr	r2, [pc, #448]	; (8002e78 <HAL_RCC_ClockConfig+0x264>)
 8002cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cbc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002cbe:	2380      	movs	r3, #128	; 0x80
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	e024      	b.n	8002d0e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d107      	bne.n	8002cdc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ccc:	4b6a      	ldr	r3, [pc, #424]	; (8002e78 <HAL_RCC_ClockConfig+0x264>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d109      	bne.n	8002cec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e0c6      	b.n	8002e6a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cdc:	4b66      	ldr	r3, [pc, #408]	; (8002e78 <HAL_RCC_ClockConfig+0x264>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e0be      	b.n	8002e6a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002cec:	f000 f8ce 	bl	8002e8c <HAL_RCC_GetSysClockFreq>
 8002cf0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	4a61      	ldr	r2, [pc, #388]	; (8002e7c <HAL_RCC_ClockConfig+0x268>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d909      	bls.n	8002d0e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002cfa:	4b5f      	ldr	r3, [pc, #380]	; (8002e78 <HAL_RCC_ClockConfig+0x264>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d02:	4a5d      	ldr	r2, [pc, #372]	; (8002e78 <HAL_RCC_ClockConfig+0x264>)
 8002d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d08:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002d0a:	2380      	movs	r3, #128	; 0x80
 8002d0c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d0e:	4b5a      	ldr	r3, [pc, #360]	; (8002e78 <HAL_RCC_ClockConfig+0x264>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f023 0203 	bic.w	r2, r3, #3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	4957      	ldr	r1, [pc, #348]	; (8002e78 <HAL_RCC_ClockConfig+0x264>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d20:	f7fe fb76 	bl	8001410 <HAL_GetTick>
 8002d24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d26:	e00a      	b.n	8002d3e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d28:	f7fe fb72 	bl	8001410 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e095      	b.n	8002e6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3e:	4b4e      	ldr	r3, [pc, #312]	; (8002e78 <HAL_RCC_ClockConfig+0x264>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 020c 	and.w	r2, r3, #12
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d1eb      	bne.n	8002d28 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d023      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d005      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d68:	4b43      	ldr	r3, [pc, #268]	; (8002e78 <HAL_RCC_ClockConfig+0x264>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	4a42      	ldr	r2, [pc, #264]	; (8002e78 <HAL_RCC_ClockConfig+0x264>)
 8002d6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d72:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0308 	and.w	r3, r3, #8
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d007      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002d80:	4b3d      	ldr	r3, [pc, #244]	; (8002e78 <HAL_RCC_ClockConfig+0x264>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002d88:	4a3b      	ldr	r2, [pc, #236]	; (8002e78 <HAL_RCC_ClockConfig+0x264>)
 8002d8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d90:	4b39      	ldr	r3, [pc, #228]	; (8002e78 <HAL_RCC_ClockConfig+0x264>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	4936      	ldr	r1, [pc, #216]	; (8002e78 <HAL_RCC_ClockConfig+0x264>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	608b      	str	r3, [r1, #8]
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	2b80      	cmp	r3, #128	; 0x80
 8002da8:	d105      	bne.n	8002db6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002daa:	4b33      	ldr	r3, [pc, #204]	; (8002e78 <HAL_RCC_ClockConfig+0x264>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	4a32      	ldr	r2, [pc, #200]	; (8002e78 <HAL_RCC_ClockConfig+0x264>)
 8002db0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002db4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002db6:	4b2f      	ldr	r3, [pc, #188]	; (8002e74 <HAL_RCC_ClockConfig+0x260>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d21d      	bcs.n	8002e00 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc4:	4b2b      	ldr	r3, [pc, #172]	; (8002e74 <HAL_RCC_ClockConfig+0x260>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f023 020f 	bic.w	r2, r3, #15
 8002dcc:	4929      	ldr	r1, [pc, #164]	; (8002e74 <HAL_RCC_ClockConfig+0x260>)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002dd4:	f7fe fb1c 	bl	8001410 <HAL_GetTick>
 8002dd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dda:	e00a      	b.n	8002df2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ddc:	f7fe fb18 	bl	8001410 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e03b      	b.n	8002e6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df2:	4b20      	ldr	r3, [pc, #128]	; (8002e74 <HAL_RCC_ClockConfig+0x260>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 030f 	and.w	r3, r3, #15
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d1ed      	bne.n	8002ddc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d008      	beq.n	8002e1e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e0c:	4b1a      	ldr	r3, [pc, #104]	; (8002e78 <HAL_RCC_ClockConfig+0x264>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	4917      	ldr	r1, [pc, #92]	; (8002e78 <HAL_RCC_ClockConfig+0x264>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d009      	beq.n	8002e3e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e2a:	4b13      	ldr	r3, [pc, #76]	; (8002e78 <HAL_RCC_ClockConfig+0x264>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	490f      	ldr	r1, [pc, #60]	; (8002e78 <HAL_RCC_ClockConfig+0x264>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e3e:	f000 f825 	bl	8002e8c <HAL_RCC_GetSysClockFreq>
 8002e42:	4602      	mov	r2, r0
 8002e44:	4b0c      	ldr	r3, [pc, #48]	; (8002e78 <HAL_RCC_ClockConfig+0x264>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	091b      	lsrs	r3, r3, #4
 8002e4a:	f003 030f 	and.w	r3, r3, #15
 8002e4e:	490c      	ldr	r1, [pc, #48]	; (8002e80 <HAL_RCC_ClockConfig+0x26c>)
 8002e50:	5ccb      	ldrb	r3, [r1, r3]
 8002e52:	f003 031f 	and.w	r3, r3, #31
 8002e56:	fa22 f303 	lsr.w	r3, r2, r3
 8002e5a:	4a0a      	ldr	r2, [pc, #40]	; (8002e84 <HAL_RCC_ClockConfig+0x270>)
 8002e5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002e5e:	4b0a      	ldr	r3, [pc, #40]	; (8002e88 <HAL_RCC_ClockConfig+0x274>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fe fa88 	bl	8001378 <HAL_InitTick>
 8002e68:	4603      	mov	r3, r0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3718      	adds	r7, #24
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40022000 	.word	0x40022000
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	04c4b400 	.word	0x04c4b400
 8002e80:	0800499c 	.word	0x0800499c
 8002e84:	20000000 	.word	0x20000000
 8002e88:	20000004 	.word	0x20000004

08002e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b087      	sub	sp, #28
 8002e90:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002e92:	4b2c      	ldr	r3, [pc, #176]	; (8002f44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 030c 	and.w	r3, r3, #12
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d102      	bne.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e9e:	4b2a      	ldr	r3, [pc, #168]	; (8002f48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ea0:	613b      	str	r3, [r7, #16]
 8002ea2:	e047      	b.n	8002f34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002ea4:	4b27      	ldr	r3, [pc, #156]	; (8002f44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 030c 	and.w	r3, r3, #12
 8002eac:	2b08      	cmp	r3, #8
 8002eae:	d102      	bne.n	8002eb6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002eb0:	4b26      	ldr	r3, [pc, #152]	; (8002f4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002eb2:	613b      	str	r3, [r7, #16]
 8002eb4:	e03e      	b.n	8002f34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002eb6:	4b23      	ldr	r3, [pc, #140]	; (8002f44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 030c 	and.w	r3, r3, #12
 8002ebe:	2b0c      	cmp	r3, #12
 8002ec0:	d136      	bne.n	8002f30 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ec2:	4b20      	ldr	r3, [pc, #128]	; (8002f44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ecc:	4b1d      	ldr	r3, [pc, #116]	; (8002f44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	091b      	lsrs	r3, r3, #4
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2b03      	cmp	r3, #3
 8002ede:	d10c      	bne.n	8002efa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ee0:	4a1a      	ldr	r2, [pc, #104]	; (8002f4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee8:	4a16      	ldr	r2, [pc, #88]	; (8002f44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002eea:	68d2      	ldr	r2, [r2, #12]
 8002eec:	0a12      	lsrs	r2, r2, #8
 8002eee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ef2:	fb02 f303 	mul.w	r3, r2, r3
 8002ef6:	617b      	str	r3, [r7, #20]
      break;
 8002ef8:	e00c      	b.n	8002f14 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002efa:	4a13      	ldr	r2, [pc, #76]	; (8002f48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f02:	4a10      	ldr	r2, [pc, #64]	; (8002f44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f04:	68d2      	ldr	r2, [r2, #12]
 8002f06:	0a12      	lsrs	r2, r2, #8
 8002f08:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f0c:	fb02 f303 	mul.w	r3, r2, r3
 8002f10:	617b      	str	r3, [r7, #20]
      break;
 8002f12:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f14:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	0e5b      	lsrs	r3, r3, #25
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	3301      	adds	r3, #1
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f2c:	613b      	str	r3, [r7, #16]
 8002f2e:	e001      	b.n	8002f34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002f34:	693b      	ldr	r3, [r7, #16]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	371c      	adds	r7, #28
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	40021000 	.word	0x40021000
 8002f48:	00f42400 	.word	0x00f42400
 8002f4c:	016e3600 	.word	0x016e3600

08002f50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f54:	4b03      	ldr	r3, [pc, #12]	; (8002f64 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f56:	681b      	ldr	r3, [r3, #0]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	20000000 	.word	0x20000000

08002f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f6c:	f7ff fff0 	bl	8002f50 <HAL_RCC_GetHCLKFreq>
 8002f70:	4602      	mov	r2, r0
 8002f72:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	0a1b      	lsrs	r3, r3, #8
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	4904      	ldr	r1, [pc, #16]	; (8002f90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f7e:	5ccb      	ldrb	r3, [r1, r3]
 8002f80:	f003 031f 	and.w	r3, r3, #31
 8002f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	080049ac 	.word	0x080049ac

08002f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f98:	f7ff ffda 	bl	8002f50 <HAL_RCC_GetHCLKFreq>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	0adb      	lsrs	r3, r3, #11
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	4904      	ldr	r1, [pc, #16]	; (8002fbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002faa:	5ccb      	ldrb	r3, [r1, r3]
 8002fac:	f003 031f 	and.w	r3, r3, #31
 8002fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	080049ac 	.word	0x080049ac

08002fc0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b087      	sub	sp, #28
 8002fc4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fc6:	4b1e      	ldr	r3, [pc, #120]	; (8003040 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fd0:	4b1b      	ldr	r3, [pc, #108]	; (8003040 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	091b      	lsrs	r3, r3, #4
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	3301      	adds	r3, #1
 8002fdc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	2b03      	cmp	r3, #3
 8002fe2:	d10c      	bne.n	8002ffe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002fe4:	4a17      	ldr	r2, [pc, #92]	; (8003044 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fec:	4a14      	ldr	r2, [pc, #80]	; (8003040 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002fee:	68d2      	ldr	r2, [r2, #12]
 8002ff0:	0a12      	lsrs	r2, r2, #8
 8002ff2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ff6:	fb02 f303 	mul.w	r3, r2, r3
 8002ffa:	617b      	str	r3, [r7, #20]
    break;
 8002ffc:	e00c      	b.n	8003018 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ffe:	4a12      	ldr	r2, [pc, #72]	; (8003048 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	fbb2 f3f3 	udiv	r3, r2, r3
 8003006:	4a0e      	ldr	r2, [pc, #56]	; (8003040 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003008:	68d2      	ldr	r2, [r2, #12]
 800300a:	0a12      	lsrs	r2, r2, #8
 800300c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003010:	fb02 f303 	mul.w	r3, r2, r3
 8003014:	617b      	str	r3, [r7, #20]
    break;
 8003016:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003018:	4b09      	ldr	r3, [pc, #36]	; (8003040 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	0e5b      	lsrs	r3, r3, #25
 800301e:	f003 0303 	and.w	r3, r3, #3
 8003022:	3301      	adds	r3, #1
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003030:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003032:	687b      	ldr	r3, [r7, #4]
}
 8003034:	4618      	mov	r0, r3
 8003036:	371c      	adds	r7, #28
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	40021000 	.word	0x40021000
 8003044:	016e3600 	.word	0x016e3600
 8003048:	00f42400 	.word	0x00f42400

0800304c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003054:	2300      	movs	r3, #0
 8003056:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003058:	2300      	movs	r3, #0
 800305a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 8098 	beq.w	800319a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800306a:	2300      	movs	r3, #0
 800306c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800306e:	4b43      	ldr	r3, [pc, #268]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10d      	bne.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800307a:	4b40      	ldr	r3, [pc, #256]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800307c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307e:	4a3f      	ldr	r2, [pc, #252]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003084:	6593      	str	r3, [r2, #88]	; 0x58
 8003086:	4b3d      	ldr	r3, [pc, #244]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308e:	60bb      	str	r3, [r7, #8]
 8003090:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003092:	2301      	movs	r3, #1
 8003094:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003096:	4b3a      	ldr	r3, [pc, #232]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a39      	ldr	r2, [pc, #228]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800309c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030a2:	f7fe f9b5 	bl	8001410 <HAL_GetTick>
 80030a6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030a8:	e009      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030aa:	f7fe f9b1 	bl	8001410 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d902      	bls.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	74fb      	strb	r3, [r7, #19]
        break;
 80030bc:	e005      	b.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030be:	4b30      	ldr	r3, [pc, #192]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0ef      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80030ca:	7cfb      	ldrb	r3, [r7, #19]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d159      	bne.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030d0:	4b2a      	ldr	r3, [pc, #168]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030da:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d01e      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d019      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030ec:	4b23      	ldr	r3, [pc, #140]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030f8:	4b20      	ldr	r3, [pc, #128]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80030fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fe:	4a1f      	ldr	r2, [pc, #124]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003108:	4b1c      	ldr	r3, [pc, #112]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800310a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310e:	4a1b      	ldr	r2, [pc, #108]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003110:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003114:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003118:	4a18      	ldr	r2, [pc, #96]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d016      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312a:	f7fe f971 	bl	8001410 <HAL_GetTick>
 800312e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003130:	e00b      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003132:	f7fe f96d 	bl	8001410 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003140:	4293      	cmp	r3, r2
 8003142:	d902      	bls.n	800314a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	74fb      	strb	r3, [r7, #19]
            break;
 8003148:	e006      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800314a:	4b0c      	ldr	r3, [pc, #48]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800314c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0ec      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003158:	7cfb      	ldrb	r3, [r7, #19]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10b      	bne.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800315e:	4b07      	ldr	r3, [pc, #28]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003164:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316c:	4903      	ldr	r1, [pc, #12]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800316e:	4313      	orrs	r3, r2
 8003170:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003174:	e008      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003176:	7cfb      	ldrb	r3, [r7, #19]
 8003178:	74bb      	strb	r3, [r7, #18]
 800317a:	e005      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800317c:	40021000 	.word	0x40021000
 8003180:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003184:	7cfb      	ldrb	r3, [r7, #19]
 8003186:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003188:	7c7b      	ldrb	r3, [r7, #17]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d105      	bne.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800318e:	4ba6      	ldr	r3, [pc, #664]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003192:	4aa5      	ldr	r2, [pc, #660]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003194:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003198:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031a6:	4ba0      	ldr	r3, [pc, #640]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ac:	f023 0203 	bic.w	r2, r3, #3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	499c      	ldr	r1, [pc, #624]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00a      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031c8:	4b97      	ldr	r3, [pc, #604]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ce:	f023 020c 	bic.w	r2, r3, #12
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	4994      	ldr	r1, [pc, #592]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00a      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031ea:	4b8f      	ldr	r3, [pc, #572]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	498b      	ldr	r1, [pc, #556]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0308 	and.w	r3, r3, #8
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00a      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800320c:	4b86      	ldr	r3, [pc, #536]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800320e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003212:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	4983      	ldr	r1, [pc, #524]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800321c:	4313      	orrs	r3, r2
 800321e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0320 	and.w	r3, r3, #32
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00a      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800322e:	4b7e      	ldr	r3, [pc, #504]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003234:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	497a      	ldr	r1, [pc, #488]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800323e:	4313      	orrs	r3, r2
 8003240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00a      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003250:	4b75      	ldr	r3, [pc, #468]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003256:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	4972      	ldr	r1, [pc, #456]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003260:	4313      	orrs	r3, r2
 8003262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00a      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003272:	4b6d      	ldr	r3, [pc, #436]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003278:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	4969      	ldr	r1, [pc, #420]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003282:	4313      	orrs	r3, r2
 8003284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00a      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003294:	4b64      	ldr	r3, [pc, #400]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	4961      	ldr	r1, [pc, #388]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032b6:	4b5c      	ldr	r3, [pc, #368]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	4958      	ldr	r1, [pc, #352]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d015      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032d8:	4b53      	ldr	r3, [pc, #332]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e6:	4950      	ldr	r1, [pc, #320]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032f6:	d105      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032f8:	4b4b      	ldr	r3, [pc, #300]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	4a4a      	ldr	r2, [pc, #296]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80032fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003302:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800330c:	2b00      	cmp	r3, #0
 800330e:	d015      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003310:	4b45      	ldr	r3, [pc, #276]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003316:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331e:	4942      	ldr	r1, [pc, #264]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800332e:	d105      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003330:	4b3d      	ldr	r3, [pc, #244]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	4a3c      	ldr	r2, [pc, #240]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003336:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800333a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d015      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003348:	4b37      	ldr	r3, [pc, #220]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800334a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003356:	4934      	ldr	r1, [pc, #208]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003358:	4313      	orrs	r3, r2
 800335a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003366:	d105      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003368:	4b2f      	ldr	r3, [pc, #188]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	4a2e      	ldr	r2, [pc, #184]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800336e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003372:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d015      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003380:	4b29      	ldr	r3, [pc, #164]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003386:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800338e:	4926      	ldr	r1, [pc, #152]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003390:	4313      	orrs	r3, r2
 8003392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800339e:	d105      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033a0:	4b21      	ldr	r3, [pc, #132]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	4a20      	ldr	r2, [pc, #128]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033aa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d015      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033b8:	4b1b      	ldr	r3, [pc, #108]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c6:	4918      	ldr	r1, [pc, #96]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033d6:	d105      	bne.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033d8:	4b13      	ldr	r3, [pc, #76]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	4a12      	ldr	r2, [pc, #72]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033e2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d015      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80033f0:	4b0d      	ldr	r3, [pc, #52]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80033f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fe:	490a      	ldr	r1, [pc, #40]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003400:	4313      	orrs	r3, r2
 8003402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800340a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800340e:	d105      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003410:	4b05      	ldr	r3, [pc, #20]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	4a04      	ldr	r2, [pc, #16]	; (8003428 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800341a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800341c:	7cbb      	ldrb	r3, [r7, #18]
}
 800341e:	4618      	mov	r0, r3
 8003420:	3718      	adds	r7, #24
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	40021000 	.word	0x40021000

0800342c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e042      	b.n	80034c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003444:	2b00      	cmp	r3, #0
 8003446:	d106      	bne.n	8003456 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f7fd fe85 	bl	8001160 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2224      	movs	r2, #36	; 0x24
 800345a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0201 	bic.w	r2, r2, #1
 800346c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f8c2 	bl	80035f8 <UART_SetConfig>
 8003474:	4603      	mov	r3, r0
 8003476:	2b01      	cmp	r3, #1
 8003478:	d101      	bne.n	800347e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e022      	b.n	80034c4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 fb52 	bl	8003b30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800349a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689a      	ldr	r2, [r3, #8]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0201 	orr.w	r2, r2, #1
 80034ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 fbd9 	bl	8003c74 <UART_CheckIdleState>
 80034c2:	4603      	mov	r3, r0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b08a      	sub	sp, #40	; 0x28
 80034d0:	af02      	add	r7, sp, #8
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	603b      	str	r3, [r7, #0]
 80034d8:	4613      	mov	r3, r2
 80034da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034e2:	2b20      	cmp	r3, #32
 80034e4:	f040 8083 	bne.w	80035ee <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d002      	beq.n	80034f4 <HAL_UART_Transmit+0x28>
 80034ee:	88fb      	ldrh	r3, [r7, #6]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e07b      	b.n	80035f0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d101      	bne.n	8003506 <HAL_UART_Transmit+0x3a>
 8003502:	2302      	movs	r3, #2
 8003504:	e074      	b.n	80035f0 <HAL_UART_Transmit+0x124>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2221      	movs	r2, #33	; 0x21
 800351a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800351e:	f7fd ff77 	bl	8001410 <HAL_GetTick>
 8003522:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	88fa      	ldrh	r2, [r7, #6]
 8003528:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	88fa      	ldrh	r2, [r7, #6]
 8003530:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800353c:	d108      	bne.n	8003550 <HAL_UART_Transmit+0x84>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d104      	bne.n	8003550 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003546:	2300      	movs	r3, #0
 8003548:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	61bb      	str	r3, [r7, #24]
 800354e:	e003      	b.n	8003558 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003554:	2300      	movs	r3, #0
 8003556:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003560:	e02c      	b.n	80035bc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	2200      	movs	r2, #0
 800356a:	2180      	movs	r1, #128	; 0x80
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f000 fbcc 	bl	8003d0a <UART_WaitOnFlagUntilTimeout>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e039      	b.n	80035f0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10b      	bne.n	800359a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	881b      	ldrh	r3, [r3, #0]
 8003586:	461a      	mov	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003590:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	3302      	adds	r3, #2
 8003596:	61bb      	str	r3, [r7, #24]
 8003598:	e007      	b.n	80035aa <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	781a      	ldrb	r2, [r3, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	3301      	adds	r3, #1
 80035a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	3b01      	subs	r3, #1
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1cc      	bne.n	8003562 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	2200      	movs	r2, #0
 80035d0:	2140      	movs	r1, #64	; 0x40
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 fb99 	bl	8003d0a <UART_WaitOnFlagUntilTimeout>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e006      	b.n	80035f0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2220      	movs	r2, #32
 80035e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80035ea:	2300      	movs	r3, #0
 80035ec:	e000      	b.n	80035f0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80035ee:	2302      	movs	r3, #2
  }
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3720      	adds	r7, #32
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035f8:	b5b0      	push	{r4, r5, r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003600:	2300      	movs	r3, #0
 8003602:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	431a      	orrs	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	431a      	orrs	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	4313      	orrs	r3, r2
 800361a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	4baf      	ldr	r3, [pc, #700]	; (80038e0 <UART_SetConfig+0x2e8>)
 8003624:	4013      	ands	r3, r2
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6812      	ldr	r2, [r2, #0]
 800362a:	69f9      	ldr	r1, [r7, #28]
 800362c:	430b      	orrs	r3, r1
 800362e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4aa4      	ldr	r2, [pc, #656]	; (80038e4 <UART_SetConfig+0x2ec>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d004      	beq.n	8003660 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	69fa      	ldr	r2, [r7, #28]
 800365c:	4313      	orrs	r3, r2
 800365e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800366a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	6812      	ldr	r2, [r2, #0]
 8003672:	69f9      	ldr	r1, [r7, #28]
 8003674:	430b      	orrs	r3, r1
 8003676:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367e:	f023 010f 	bic.w	r1, r3, #15
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a95      	ldr	r2, [pc, #596]	; (80038e8 <UART_SetConfig+0x2f0>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d120      	bne.n	80036da <UART_SetConfig+0xe2>
 8003698:	4b94      	ldr	r3, [pc, #592]	; (80038ec <UART_SetConfig+0x2f4>)
 800369a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	2b03      	cmp	r3, #3
 80036a4:	d816      	bhi.n	80036d4 <UART_SetConfig+0xdc>
 80036a6:	a201      	add	r2, pc, #4	; (adr r2, 80036ac <UART_SetConfig+0xb4>)
 80036a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ac:	080036bd 	.word	0x080036bd
 80036b0:	080036c9 	.word	0x080036c9
 80036b4:	080036c3 	.word	0x080036c3
 80036b8:	080036cf 	.word	0x080036cf
 80036bc:	2301      	movs	r3, #1
 80036be:	76fb      	strb	r3, [r7, #27]
 80036c0:	e0bc      	b.n	800383c <UART_SetConfig+0x244>
 80036c2:	2302      	movs	r3, #2
 80036c4:	76fb      	strb	r3, [r7, #27]
 80036c6:	e0b9      	b.n	800383c <UART_SetConfig+0x244>
 80036c8:	2304      	movs	r3, #4
 80036ca:	76fb      	strb	r3, [r7, #27]
 80036cc:	e0b6      	b.n	800383c <UART_SetConfig+0x244>
 80036ce:	2308      	movs	r3, #8
 80036d0:	76fb      	strb	r3, [r7, #27]
 80036d2:	e0b3      	b.n	800383c <UART_SetConfig+0x244>
 80036d4:	2310      	movs	r3, #16
 80036d6:	76fb      	strb	r3, [r7, #27]
 80036d8:	e0b0      	b.n	800383c <UART_SetConfig+0x244>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a84      	ldr	r2, [pc, #528]	; (80038f0 <UART_SetConfig+0x2f8>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d132      	bne.n	800374a <UART_SetConfig+0x152>
 80036e4:	4b81      	ldr	r3, [pc, #516]	; (80038ec <UART_SetConfig+0x2f4>)
 80036e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ea:	f003 030c 	and.w	r3, r3, #12
 80036ee:	2b0c      	cmp	r3, #12
 80036f0:	d828      	bhi.n	8003744 <UART_SetConfig+0x14c>
 80036f2:	a201      	add	r2, pc, #4	; (adr r2, 80036f8 <UART_SetConfig+0x100>)
 80036f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f8:	0800372d 	.word	0x0800372d
 80036fc:	08003745 	.word	0x08003745
 8003700:	08003745 	.word	0x08003745
 8003704:	08003745 	.word	0x08003745
 8003708:	08003739 	.word	0x08003739
 800370c:	08003745 	.word	0x08003745
 8003710:	08003745 	.word	0x08003745
 8003714:	08003745 	.word	0x08003745
 8003718:	08003733 	.word	0x08003733
 800371c:	08003745 	.word	0x08003745
 8003720:	08003745 	.word	0x08003745
 8003724:	08003745 	.word	0x08003745
 8003728:	0800373f 	.word	0x0800373f
 800372c:	2300      	movs	r3, #0
 800372e:	76fb      	strb	r3, [r7, #27]
 8003730:	e084      	b.n	800383c <UART_SetConfig+0x244>
 8003732:	2302      	movs	r3, #2
 8003734:	76fb      	strb	r3, [r7, #27]
 8003736:	e081      	b.n	800383c <UART_SetConfig+0x244>
 8003738:	2304      	movs	r3, #4
 800373a:	76fb      	strb	r3, [r7, #27]
 800373c:	e07e      	b.n	800383c <UART_SetConfig+0x244>
 800373e:	2308      	movs	r3, #8
 8003740:	76fb      	strb	r3, [r7, #27]
 8003742:	e07b      	b.n	800383c <UART_SetConfig+0x244>
 8003744:	2310      	movs	r3, #16
 8003746:	76fb      	strb	r3, [r7, #27]
 8003748:	e078      	b.n	800383c <UART_SetConfig+0x244>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a69      	ldr	r2, [pc, #420]	; (80038f4 <UART_SetConfig+0x2fc>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d120      	bne.n	8003796 <UART_SetConfig+0x19e>
 8003754:	4b65      	ldr	r3, [pc, #404]	; (80038ec <UART_SetConfig+0x2f4>)
 8003756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800375e:	2b30      	cmp	r3, #48	; 0x30
 8003760:	d013      	beq.n	800378a <UART_SetConfig+0x192>
 8003762:	2b30      	cmp	r3, #48	; 0x30
 8003764:	d814      	bhi.n	8003790 <UART_SetConfig+0x198>
 8003766:	2b20      	cmp	r3, #32
 8003768:	d009      	beq.n	800377e <UART_SetConfig+0x186>
 800376a:	2b20      	cmp	r3, #32
 800376c:	d810      	bhi.n	8003790 <UART_SetConfig+0x198>
 800376e:	2b00      	cmp	r3, #0
 8003770:	d002      	beq.n	8003778 <UART_SetConfig+0x180>
 8003772:	2b10      	cmp	r3, #16
 8003774:	d006      	beq.n	8003784 <UART_SetConfig+0x18c>
 8003776:	e00b      	b.n	8003790 <UART_SetConfig+0x198>
 8003778:	2300      	movs	r3, #0
 800377a:	76fb      	strb	r3, [r7, #27]
 800377c:	e05e      	b.n	800383c <UART_SetConfig+0x244>
 800377e:	2302      	movs	r3, #2
 8003780:	76fb      	strb	r3, [r7, #27]
 8003782:	e05b      	b.n	800383c <UART_SetConfig+0x244>
 8003784:	2304      	movs	r3, #4
 8003786:	76fb      	strb	r3, [r7, #27]
 8003788:	e058      	b.n	800383c <UART_SetConfig+0x244>
 800378a:	2308      	movs	r3, #8
 800378c:	76fb      	strb	r3, [r7, #27]
 800378e:	e055      	b.n	800383c <UART_SetConfig+0x244>
 8003790:	2310      	movs	r3, #16
 8003792:	76fb      	strb	r3, [r7, #27]
 8003794:	e052      	b.n	800383c <UART_SetConfig+0x244>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a57      	ldr	r2, [pc, #348]	; (80038f8 <UART_SetConfig+0x300>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d120      	bne.n	80037e2 <UART_SetConfig+0x1ea>
 80037a0:	4b52      	ldr	r3, [pc, #328]	; (80038ec <UART_SetConfig+0x2f4>)
 80037a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80037aa:	2bc0      	cmp	r3, #192	; 0xc0
 80037ac:	d013      	beq.n	80037d6 <UART_SetConfig+0x1de>
 80037ae:	2bc0      	cmp	r3, #192	; 0xc0
 80037b0:	d814      	bhi.n	80037dc <UART_SetConfig+0x1e4>
 80037b2:	2b80      	cmp	r3, #128	; 0x80
 80037b4:	d009      	beq.n	80037ca <UART_SetConfig+0x1d2>
 80037b6:	2b80      	cmp	r3, #128	; 0x80
 80037b8:	d810      	bhi.n	80037dc <UART_SetConfig+0x1e4>
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d002      	beq.n	80037c4 <UART_SetConfig+0x1cc>
 80037be:	2b40      	cmp	r3, #64	; 0x40
 80037c0:	d006      	beq.n	80037d0 <UART_SetConfig+0x1d8>
 80037c2:	e00b      	b.n	80037dc <UART_SetConfig+0x1e4>
 80037c4:	2300      	movs	r3, #0
 80037c6:	76fb      	strb	r3, [r7, #27]
 80037c8:	e038      	b.n	800383c <UART_SetConfig+0x244>
 80037ca:	2302      	movs	r3, #2
 80037cc:	76fb      	strb	r3, [r7, #27]
 80037ce:	e035      	b.n	800383c <UART_SetConfig+0x244>
 80037d0:	2304      	movs	r3, #4
 80037d2:	76fb      	strb	r3, [r7, #27]
 80037d4:	e032      	b.n	800383c <UART_SetConfig+0x244>
 80037d6:	2308      	movs	r3, #8
 80037d8:	76fb      	strb	r3, [r7, #27]
 80037da:	e02f      	b.n	800383c <UART_SetConfig+0x244>
 80037dc:	2310      	movs	r3, #16
 80037de:	76fb      	strb	r3, [r7, #27]
 80037e0:	e02c      	b.n	800383c <UART_SetConfig+0x244>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a3f      	ldr	r2, [pc, #252]	; (80038e4 <UART_SetConfig+0x2ec>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d125      	bne.n	8003838 <UART_SetConfig+0x240>
 80037ec:	4b3f      	ldr	r3, [pc, #252]	; (80038ec <UART_SetConfig+0x2f4>)
 80037ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037fa:	d017      	beq.n	800382c <UART_SetConfig+0x234>
 80037fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003800:	d817      	bhi.n	8003832 <UART_SetConfig+0x23a>
 8003802:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003806:	d00b      	beq.n	8003820 <UART_SetConfig+0x228>
 8003808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800380c:	d811      	bhi.n	8003832 <UART_SetConfig+0x23a>
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <UART_SetConfig+0x222>
 8003812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003816:	d006      	beq.n	8003826 <UART_SetConfig+0x22e>
 8003818:	e00b      	b.n	8003832 <UART_SetConfig+0x23a>
 800381a:	2300      	movs	r3, #0
 800381c:	76fb      	strb	r3, [r7, #27]
 800381e:	e00d      	b.n	800383c <UART_SetConfig+0x244>
 8003820:	2302      	movs	r3, #2
 8003822:	76fb      	strb	r3, [r7, #27]
 8003824:	e00a      	b.n	800383c <UART_SetConfig+0x244>
 8003826:	2304      	movs	r3, #4
 8003828:	76fb      	strb	r3, [r7, #27]
 800382a:	e007      	b.n	800383c <UART_SetConfig+0x244>
 800382c:	2308      	movs	r3, #8
 800382e:	76fb      	strb	r3, [r7, #27]
 8003830:	e004      	b.n	800383c <UART_SetConfig+0x244>
 8003832:	2310      	movs	r3, #16
 8003834:	76fb      	strb	r3, [r7, #27]
 8003836:	e001      	b.n	800383c <UART_SetConfig+0x244>
 8003838:	2310      	movs	r3, #16
 800383a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a28      	ldr	r2, [pc, #160]	; (80038e4 <UART_SetConfig+0x2ec>)
 8003842:	4293      	cmp	r3, r2
 8003844:	f040 809e 	bne.w	8003984 <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003848:	7efb      	ldrb	r3, [r7, #27]
 800384a:	2b08      	cmp	r3, #8
 800384c:	d823      	bhi.n	8003896 <UART_SetConfig+0x29e>
 800384e:	a201      	add	r2, pc, #4	; (adr r2, 8003854 <UART_SetConfig+0x25c>)
 8003850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003854:	08003879 	.word	0x08003879
 8003858:	08003897 	.word	0x08003897
 800385c:	08003881 	.word	0x08003881
 8003860:	08003897 	.word	0x08003897
 8003864:	08003887 	.word	0x08003887
 8003868:	08003897 	.word	0x08003897
 800386c:	08003897 	.word	0x08003897
 8003870:	08003897 	.word	0x08003897
 8003874:	0800388f 	.word	0x0800388f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003878:	f7ff fb76 	bl	8002f68 <HAL_RCC_GetPCLK1Freq>
 800387c:	6178      	str	r0, [r7, #20]
        break;
 800387e:	e00f      	b.n	80038a0 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003880:	4b1e      	ldr	r3, [pc, #120]	; (80038fc <UART_SetConfig+0x304>)
 8003882:	617b      	str	r3, [r7, #20]
        break;
 8003884:	e00c      	b.n	80038a0 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003886:	f7ff fb01 	bl	8002e8c <HAL_RCC_GetSysClockFreq>
 800388a:	6178      	str	r0, [r7, #20]
        break;
 800388c:	e008      	b.n	80038a0 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800388e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003892:	617b      	str	r3, [r7, #20]
        break;
 8003894:	e004      	b.n	80038a0 <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 8003896:	2300      	movs	r3, #0
 8003898:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	76bb      	strb	r3, [r7, #26]
        break;
 800389e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 812c 	beq.w	8003b00 <UART_SetConfig+0x508>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ac:	4a14      	ldr	r2, [pc, #80]	; (8003900 <UART_SetConfig+0x308>)
 80038ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038b2:	461a      	mov	r2, r3
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80038ba:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	4613      	mov	r3, r2
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	4413      	add	r3, r2
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d305      	bcc.n	80038d8 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d915      	bls.n	8003904 <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	76bb      	strb	r3, [r7, #26]
 80038dc:	e110      	b.n	8003b00 <UART_SetConfig+0x508>
 80038de:	bf00      	nop
 80038e0:	cfff69f3 	.word	0xcfff69f3
 80038e4:	40008000 	.word	0x40008000
 80038e8:	40013800 	.word	0x40013800
 80038ec:	40021000 	.word	0x40021000
 80038f0:	40004400 	.word	0x40004400
 80038f4:	40004800 	.word	0x40004800
 80038f8:	40004c00 	.word	0x40004c00
 80038fc:	00f42400 	.word	0x00f42400
 8003900:	080049b4 	.word	0x080049b4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	4618      	mov	r0, r3
 8003908:	f04f 0100 	mov.w	r1, #0
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	4a85      	ldr	r2, [pc, #532]	; (8003b28 <UART_SetConfig+0x530>)
 8003912:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003916:	b29a      	uxth	r2, r3
 8003918:	f04f 0300 	mov.w	r3, #0
 800391c:	f7fd f80e 	bl	800093c <__aeabi_uldivmod>
 8003920:	4602      	mov	r2, r0
 8003922:	460b      	mov	r3, r1
 8003924:	4610      	mov	r0, r2
 8003926:	4619      	mov	r1, r3
 8003928:	f04f 0200 	mov.w	r2, #0
 800392c:	f04f 0300 	mov.w	r3, #0
 8003930:	020b      	lsls	r3, r1, #8
 8003932:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003936:	0202      	lsls	r2, r0, #8
 8003938:	6879      	ldr	r1, [r7, #4]
 800393a:	6849      	ldr	r1, [r1, #4]
 800393c:	0849      	lsrs	r1, r1, #1
 800393e:	4608      	mov	r0, r1
 8003940:	f04f 0100 	mov.w	r1, #0
 8003944:	1814      	adds	r4, r2, r0
 8003946:	eb43 0501 	adc.w	r5, r3, r1
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	461a      	mov	r2, r3
 8003950:	f04f 0300 	mov.w	r3, #0
 8003954:	4620      	mov	r0, r4
 8003956:	4629      	mov	r1, r5
 8003958:	f7fc fff0 	bl	800093c <__aeabi_uldivmod>
 800395c:	4602      	mov	r2, r0
 800395e:	460b      	mov	r3, r1
 8003960:	4613      	mov	r3, r2
 8003962:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800396a:	d308      	bcc.n	800397e <UART_SetConfig+0x386>
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003972:	d204      	bcs.n	800397e <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	60da      	str	r2, [r3, #12]
 800397c:	e0c0      	b.n	8003b00 <UART_SetConfig+0x508>
        }
        else
        {
          ret = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	76bb      	strb	r3, [r7, #26]
 8003982:	e0bd      	b.n	8003b00 <UART_SetConfig+0x508>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800398c:	d164      	bne.n	8003a58 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800398e:	7efb      	ldrb	r3, [r7, #27]
 8003990:	2b08      	cmp	r3, #8
 8003992:	d828      	bhi.n	80039e6 <UART_SetConfig+0x3ee>
 8003994:	a201      	add	r2, pc, #4	; (adr r2, 800399c <UART_SetConfig+0x3a4>)
 8003996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399a:	bf00      	nop
 800399c:	080039c1 	.word	0x080039c1
 80039a0:	080039c9 	.word	0x080039c9
 80039a4:	080039d1 	.word	0x080039d1
 80039a8:	080039e7 	.word	0x080039e7
 80039ac:	080039d7 	.word	0x080039d7
 80039b0:	080039e7 	.word	0x080039e7
 80039b4:	080039e7 	.word	0x080039e7
 80039b8:	080039e7 	.word	0x080039e7
 80039bc:	080039df 	.word	0x080039df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039c0:	f7ff fad2 	bl	8002f68 <HAL_RCC_GetPCLK1Freq>
 80039c4:	6178      	str	r0, [r7, #20]
        break;
 80039c6:	e013      	b.n	80039f0 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039c8:	f7ff fae4 	bl	8002f94 <HAL_RCC_GetPCLK2Freq>
 80039cc:	6178      	str	r0, [r7, #20]
        break;
 80039ce:	e00f      	b.n	80039f0 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039d0:	4b56      	ldr	r3, [pc, #344]	; (8003b2c <UART_SetConfig+0x534>)
 80039d2:	617b      	str	r3, [r7, #20]
        break;
 80039d4:	e00c      	b.n	80039f0 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039d6:	f7ff fa59 	bl	8002e8c <HAL_RCC_GetSysClockFreq>
 80039da:	6178      	str	r0, [r7, #20]
        break;
 80039dc:	e008      	b.n	80039f0 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039e2:	617b      	str	r3, [r7, #20]
        break;
 80039e4:	e004      	b.n	80039f0 <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 80039e6:	2300      	movs	r3, #0
 80039e8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	76bb      	strb	r3, [r7, #26]
        break;
 80039ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f000 8084 	beq.w	8003b00 <UART_SetConfig+0x508>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fc:	4a4a      	ldr	r2, [pc, #296]	; (8003b28 <UART_SetConfig+0x530>)
 80039fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a02:	461a      	mov	r2, r3
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a0a:	005a      	lsls	r2, r3, #1
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	085b      	lsrs	r3, r3, #1
 8003a12:	441a      	add	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	2b0f      	cmp	r3, #15
 8003a22:	d916      	bls.n	8003a52 <UART_SetConfig+0x45a>
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a2a:	d212      	bcs.n	8003a52 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	f023 030f 	bic.w	r3, r3, #15
 8003a34:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	085b      	lsrs	r3, r3, #1
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	f003 0307 	and.w	r3, r3, #7
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	89fb      	ldrh	r3, [r7, #14]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	89fa      	ldrh	r2, [r7, #14]
 8003a4e:	60da      	str	r2, [r3, #12]
 8003a50:	e056      	b.n	8003b00 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	76bb      	strb	r3, [r7, #26]
 8003a56:	e053      	b.n	8003b00 <UART_SetConfig+0x508>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a58:	7efb      	ldrb	r3, [r7, #27]
 8003a5a:	2b08      	cmp	r3, #8
 8003a5c:	d827      	bhi.n	8003aae <UART_SetConfig+0x4b6>
 8003a5e:	a201      	add	r2, pc, #4	; (adr r2, 8003a64 <UART_SetConfig+0x46c>)
 8003a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a64:	08003a89 	.word	0x08003a89
 8003a68:	08003a91 	.word	0x08003a91
 8003a6c:	08003a99 	.word	0x08003a99
 8003a70:	08003aaf 	.word	0x08003aaf
 8003a74:	08003a9f 	.word	0x08003a9f
 8003a78:	08003aaf 	.word	0x08003aaf
 8003a7c:	08003aaf 	.word	0x08003aaf
 8003a80:	08003aaf 	.word	0x08003aaf
 8003a84:	08003aa7 	.word	0x08003aa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a88:	f7ff fa6e 	bl	8002f68 <HAL_RCC_GetPCLK1Freq>
 8003a8c:	6178      	str	r0, [r7, #20]
        break;
 8003a8e:	e013      	b.n	8003ab8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a90:	f7ff fa80 	bl	8002f94 <HAL_RCC_GetPCLK2Freq>
 8003a94:	6178      	str	r0, [r7, #20]
        break;
 8003a96:	e00f      	b.n	8003ab8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a98:	4b24      	ldr	r3, [pc, #144]	; (8003b2c <UART_SetConfig+0x534>)
 8003a9a:	617b      	str	r3, [r7, #20]
        break;
 8003a9c:	e00c      	b.n	8003ab8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a9e:	f7ff f9f5 	bl	8002e8c <HAL_RCC_GetSysClockFreq>
 8003aa2:	6178      	str	r0, [r7, #20]
        break;
 8003aa4:	e008      	b.n	8003ab8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aaa:	617b      	str	r3, [r7, #20]
        break;
 8003aac:	e004      	b.n	8003ab8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	76bb      	strb	r3, [r7, #26]
        break;
 8003ab6:	bf00      	nop
    }

    if (pclk != 0U)
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d020      	beq.n	8003b00 <UART_SetConfig+0x508>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac2:	4a19      	ldr	r2, [pc, #100]	; (8003b28 <UART_SetConfig+0x530>)
 8003ac4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	fbb3 f2f2 	udiv	r2, r3, r2
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	085b      	lsrs	r3, r3, #1
 8003ad6:	441a      	add	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	2b0f      	cmp	r3, #15
 8003ae6:	d909      	bls.n	8003afc <UART_SetConfig+0x504>
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aee:	d205      	bcs.n	8003afc <UART_SetConfig+0x504>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	60da      	str	r2, [r3, #12]
 8003afa:	e001      	b.n	8003b00 <UART_SetConfig+0x508>
      }
      else
      {
        ret = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003b1c:	7ebb      	ldrb	r3, [r7, #26]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3720      	adds	r7, #32
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bdb0      	pop	{r4, r5, r7, pc}
 8003b26:	bf00      	nop
 8003b28:	080049b4 	.word	0x080049b4
 8003b2c:	00f42400 	.word	0x00f42400

08003b30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00a      	beq.n	8003b5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00a      	beq.n	8003b7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00a      	beq.n	8003b9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba2:	f003 0308 	and.w	r3, r3, #8
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00a      	beq.n	8003bc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc4:	f003 0310 	and.w	r3, r3, #16
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00a      	beq.n	8003be2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be6:	f003 0320 	and.w	r3, r3, #32
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00a      	beq.n	8003c04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d01a      	beq.n	8003c46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c2e:	d10a      	bne.n	8003c46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00a      	beq.n	8003c68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	605a      	str	r2, [r3, #4]
  }
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af02      	add	r7, sp, #8
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c84:	f7fd fbc4 	bl	8001410 <HAL_GetTick>
 8003c88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0308 	and.w	r3, r3, #8
 8003c94:	2b08      	cmp	r3, #8
 8003c96:	d10e      	bne.n	8003cb6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f82f 	bl	8003d0a <UART_WaitOnFlagUntilTimeout>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e025      	b.n	8003d02 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0304 	and.w	r3, r3, #4
 8003cc0:	2b04      	cmp	r3, #4
 8003cc2:	d10e      	bne.n	8003ce2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f819 	bl	8003d0a <UART_WaitOnFlagUntilTimeout>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e00f      	b.n	8003d02 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2220      	movs	r2, #32
 8003cee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b09c      	sub	sp, #112	; 0x70
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	60f8      	str	r0, [r7, #12]
 8003d12:	60b9      	str	r1, [r7, #8]
 8003d14:	603b      	str	r3, [r7, #0]
 8003d16:	4613      	mov	r3, r2
 8003d18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d1a:	e0a9      	b.n	8003e70 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d22:	f000 80a5 	beq.w	8003e70 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d26:	f7fd fb73 	bl	8001410 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d302      	bcc.n	8003d3c <UART_WaitOnFlagUntilTimeout+0x32>
 8003d36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d140      	bne.n	8003dbe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d44:	e853 3f00 	ldrex	r3, [r3]
 8003d48:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d50:	667b      	str	r3, [r7, #100]	; 0x64
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d5c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d62:	e841 2300 	strex	r3, r2, [r1]
 8003d66:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003d68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1e6      	bne.n	8003d3c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3308      	adds	r3, #8
 8003d74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d78:	e853 3f00 	ldrex	r3, [r3]
 8003d7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d80:	f023 0301 	bic.w	r3, r3, #1
 8003d84:	663b      	str	r3, [r7, #96]	; 0x60
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3308      	adds	r3, #8
 8003d8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d8e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d96:	e841 2300 	strex	r3, r2, [r1]
 8003d9a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1e5      	bne.n	8003d6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2220      	movs	r2, #32
 8003da6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2220      	movs	r2, #32
 8003dae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e069      	b.n	8003e92 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d051      	beq.n	8003e70 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dda:	d149      	bne.n	8003e70 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003de4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dee:	e853 3f00 	ldrex	r3, [r3]
 8003df2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003dfa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	461a      	mov	r2, r3
 8003e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e04:	637b      	str	r3, [r7, #52]	; 0x34
 8003e06:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e0c:	e841 2300 	strex	r3, r2, [r1]
 8003e10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1e6      	bne.n	8003de6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	3308      	adds	r3, #8
 8003e1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	e853 3f00 	ldrex	r3, [r3]
 8003e26:	613b      	str	r3, [r7, #16]
   return(result);
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	f023 0301 	bic.w	r3, r3, #1
 8003e2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	3308      	adds	r3, #8
 8003e36:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e38:	623a      	str	r2, [r7, #32]
 8003e3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3c:	69f9      	ldr	r1, [r7, #28]
 8003e3e:	6a3a      	ldr	r2, [r7, #32]
 8003e40:	e841 2300 	strex	r3, r2, [r1]
 8003e44:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1e5      	bne.n	8003e18 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2220      	movs	r2, #32
 8003e58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e010      	b.n	8003e92 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	69da      	ldr	r2, [r3, #28]
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	bf0c      	ite	eq
 8003e80:	2301      	moveq	r3, #1
 8003e82:	2300      	movne	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	461a      	mov	r2, r3
 8003e88:	79fb      	ldrb	r3, [r7, #7]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	f43f af46 	beq.w	8003d1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3770      	adds	r7, #112	; 0x70
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b085      	sub	sp, #20
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d101      	bne.n	8003eb0 <HAL_UARTEx_DisableFifoMode+0x16>
 8003eac:	2302      	movs	r3, #2
 8003eae:	e027      	b.n	8003f00 <HAL_UARTEx_DisableFifoMode+0x66>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2224      	movs	r2, #36	; 0x24
 8003ebc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 0201 	bic.w	r2, r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003ede:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3714      	adds	r7, #20
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d101      	bne.n	8003f24 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003f20:	2302      	movs	r3, #2
 8003f22:	e02d      	b.n	8003f80 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2224      	movs	r2, #36	; 0x24
 8003f30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0201 	bic.w	r2, r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f84f 	bl	8004004 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2220      	movs	r2, #32
 8003f72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d101      	bne.n	8003fa0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	e02d      	b.n	8003ffc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2224      	movs	r2, #36	; 0x24
 8003fac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 0201 	bic.w	r2, r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 f811 	bl	8004004 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2220      	movs	r2, #32
 8003fee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004010:	2b00      	cmp	r3, #0
 8004012:	d108      	bne.n	8004026 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004024:	e031      	b.n	800408a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004026:	2308      	movs	r3, #8
 8004028:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800402a:	2308      	movs	r3, #8
 800402c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	0e5b      	lsrs	r3, r3, #25
 8004036:	b2db      	uxtb	r3, r3
 8004038:	f003 0307 	and.w	r3, r3, #7
 800403c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	0f5b      	lsrs	r3, r3, #29
 8004046:	b2db      	uxtb	r3, r3
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800404e:	7bbb      	ldrb	r3, [r7, #14]
 8004050:	7b3a      	ldrb	r2, [r7, #12]
 8004052:	4911      	ldr	r1, [pc, #68]	; (8004098 <UARTEx_SetNbDataToProcess+0x94>)
 8004054:	5c8a      	ldrb	r2, [r1, r2]
 8004056:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800405a:	7b3a      	ldrb	r2, [r7, #12]
 800405c:	490f      	ldr	r1, [pc, #60]	; (800409c <UARTEx_SetNbDataToProcess+0x98>)
 800405e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004060:	fb93 f3f2 	sdiv	r3, r3, r2
 8004064:	b29a      	uxth	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800406c:	7bfb      	ldrb	r3, [r7, #15]
 800406e:	7b7a      	ldrb	r2, [r7, #13]
 8004070:	4909      	ldr	r1, [pc, #36]	; (8004098 <UARTEx_SetNbDataToProcess+0x94>)
 8004072:	5c8a      	ldrb	r2, [r1, r2]
 8004074:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004078:	7b7a      	ldrb	r2, [r7, #13]
 800407a:	4908      	ldr	r1, [pc, #32]	; (800409c <UARTEx_SetNbDataToProcess+0x98>)
 800407c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800407e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004082:	b29a      	uxth	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800408a:	bf00      	nop
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	080049cc 	.word	0x080049cc
 800409c:	080049d4 	.word	0x080049d4

080040a0 <__errno>:
 80040a0:	4b01      	ldr	r3, [pc, #4]	; (80040a8 <__errno+0x8>)
 80040a2:	6818      	ldr	r0, [r3, #0]
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	2000000c 	.word	0x2000000c

080040ac <__libc_init_array>:
 80040ac:	b570      	push	{r4, r5, r6, lr}
 80040ae:	4d0d      	ldr	r5, [pc, #52]	; (80040e4 <__libc_init_array+0x38>)
 80040b0:	4c0d      	ldr	r4, [pc, #52]	; (80040e8 <__libc_init_array+0x3c>)
 80040b2:	1b64      	subs	r4, r4, r5
 80040b4:	10a4      	asrs	r4, r4, #2
 80040b6:	2600      	movs	r6, #0
 80040b8:	42a6      	cmp	r6, r4
 80040ba:	d109      	bne.n	80040d0 <__libc_init_array+0x24>
 80040bc:	4d0b      	ldr	r5, [pc, #44]	; (80040ec <__libc_init_array+0x40>)
 80040be:	4c0c      	ldr	r4, [pc, #48]	; (80040f0 <__libc_init_array+0x44>)
 80040c0:	f000 fc4e 	bl	8004960 <_init>
 80040c4:	1b64      	subs	r4, r4, r5
 80040c6:	10a4      	asrs	r4, r4, #2
 80040c8:	2600      	movs	r6, #0
 80040ca:	42a6      	cmp	r6, r4
 80040cc:	d105      	bne.n	80040da <__libc_init_array+0x2e>
 80040ce:	bd70      	pop	{r4, r5, r6, pc}
 80040d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80040d4:	4798      	blx	r3
 80040d6:	3601      	adds	r6, #1
 80040d8:	e7ee      	b.n	80040b8 <__libc_init_array+0xc>
 80040da:	f855 3b04 	ldr.w	r3, [r5], #4
 80040de:	4798      	blx	r3
 80040e0:	3601      	adds	r6, #1
 80040e2:	e7f2      	b.n	80040ca <__libc_init_array+0x1e>
 80040e4:	08004a18 	.word	0x08004a18
 80040e8:	08004a18 	.word	0x08004a18
 80040ec:	08004a18 	.word	0x08004a18
 80040f0:	08004a1c 	.word	0x08004a1c

080040f4 <memset>:
 80040f4:	4402      	add	r2, r0
 80040f6:	4603      	mov	r3, r0
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d100      	bne.n	80040fe <memset+0xa>
 80040fc:	4770      	bx	lr
 80040fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004102:	e7f9      	b.n	80040f8 <memset+0x4>

08004104 <siprintf>:
 8004104:	b40e      	push	{r1, r2, r3}
 8004106:	b500      	push	{lr}
 8004108:	b09c      	sub	sp, #112	; 0x70
 800410a:	ab1d      	add	r3, sp, #116	; 0x74
 800410c:	9002      	str	r0, [sp, #8]
 800410e:	9006      	str	r0, [sp, #24]
 8004110:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004114:	4809      	ldr	r0, [pc, #36]	; (800413c <siprintf+0x38>)
 8004116:	9107      	str	r1, [sp, #28]
 8004118:	9104      	str	r1, [sp, #16]
 800411a:	4909      	ldr	r1, [pc, #36]	; (8004140 <siprintf+0x3c>)
 800411c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004120:	9105      	str	r1, [sp, #20]
 8004122:	6800      	ldr	r0, [r0, #0]
 8004124:	9301      	str	r3, [sp, #4]
 8004126:	a902      	add	r1, sp, #8
 8004128:	f000 f868 	bl	80041fc <_svfiprintf_r>
 800412c:	9b02      	ldr	r3, [sp, #8]
 800412e:	2200      	movs	r2, #0
 8004130:	701a      	strb	r2, [r3, #0]
 8004132:	b01c      	add	sp, #112	; 0x70
 8004134:	f85d eb04 	ldr.w	lr, [sp], #4
 8004138:	b003      	add	sp, #12
 800413a:	4770      	bx	lr
 800413c:	2000000c 	.word	0x2000000c
 8004140:	ffff0208 	.word	0xffff0208

08004144 <__ssputs_r>:
 8004144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004148:	688e      	ldr	r6, [r1, #8]
 800414a:	429e      	cmp	r6, r3
 800414c:	4682      	mov	sl, r0
 800414e:	460c      	mov	r4, r1
 8004150:	4690      	mov	r8, r2
 8004152:	461f      	mov	r7, r3
 8004154:	d838      	bhi.n	80041c8 <__ssputs_r+0x84>
 8004156:	898a      	ldrh	r2, [r1, #12]
 8004158:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800415c:	d032      	beq.n	80041c4 <__ssputs_r+0x80>
 800415e:	6825      	ldr	r5, [r4, #0]
 8004160:	6909      	ldr	r1, [r1, #16]
 8004162:	eba5 0901 	sub.w	r9, r5, r1
 8004166:	6965      	ldr	r5, [r4, #20]
 8004168:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800416c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004170:	3301      	adds	r3, #1
 8004172:	444b      	add	r3, r9
 8004174:	106d      	asrs	r5, r5, #1
 8004176:	429d      	cmp	r5, r3
 8004178:	bf38      	it	cc
 800417a:	461d      	movcc	r5, r3
 800417c:	0553      	lsls	r3, r2, #21
 800417e:	d531      	bpl.n	80041e4 <__ssputs_r+0xa0>
 8004180:	4629      	mov	r1, r5
 8004182:	f000 fb47 	bl	8004814 <_malloc_r>
 8004186:	4606      	mov	r6, r0
 8004188:	b950      	cbnz	r0, 80041a0 <__ssputs_r+0x5c>
 800418a:	230c      	movs	r3, #12
 800418c:	f8ca 3000 	str.w	r3, [sl]
 8004190:	89a3      	ldrh	r3, [r4, #12]
 8004192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004196:	81a3      	strh	r3, [r4, #12]
 8004198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800419c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041a0:	6921      	ldr	r1, [r4, #16]
 80041a2:	464a      	mov	r2, r9
 80041a4:	f000 fabe 	bl	8004724 <memcpy>
 80041a8:	89a3      	ldrh	r3, [r4, #12]
 80041aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80041ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041b2:	81a3      	strh	r3, [r4, #12]
 80041b4:	6126      	str	r6, [r4, #16]
 80041b6:	6165      	str	r5, [r4, #20]
 80041b8:	444e      	add	r6, r9
 80041ba:	eba5 0509 	sub.w	r5, r5, r9
 80041be:	6026      	str	r6, [r4, #0]
 80041c0:	60a5      	str	r5, [r4, #8]
 80041c2:	463e      	mov	r6, r7
 80041c4:	42be      	cmp	r6, r7
 80041c6:	d900      	bls.n	80041ca <__ssputs_r+0x86>
 80041c8:	463e      	mov	r6, r7
 80041ca:	4632      	mov	r2, r6
 80041cc:	6820      	ldr	r0, [r4, #0]
 80041ce:	4641      	mov	r1, r8
 80041d0:	f000 fab6 	bl	8004740 <memmove>
 80041d4:	68a3      	ldr	r3, [r4, #8]
 80041d6:	6822      	ldr	r2, [r4, #0]
 80041d8:	1b9b      	subs	r3, r3, r6
 80041da:	4432      	add	r2, r6
 80041dc:	60a3      	str	r3, [r4, #8]
 80041de:	6022      	str	r2, [r4, #0]
 80041e0:	2000      	movs	r0, #0
 80041e2:	e7db      	b.n	800419c <__ssputs_r+0x58>
 80041e4:	462a      	mov	r2, r5
 80041e6:	f000 fb6f 	bl	80048c8 <_realloc_r>
 80041ea:	4606      	mov	r6, r0
 80041ec:	2800      	cmp	r0, #0
 80041ee:	d1e1      	bne.n	80041b4 <__ssputs_r+0x70>
 80041f0:	6921      	ldr	r1, [r4, #16]
 80041f2:	4650      	mov	r0, sl
 80041f4:	f000 fabe 	bl	8004774 <_free_r>
 80041f8:	e7c7      	b.n	800418a <__ssputs_r+0x46>
	...

080041fc <_svfiprintf_r>:
 80041fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004200:	4698      	mov	r8, r3
 8004202:	898b      	ldrh	r3, [r1, #12]
 8004204:	061b      	lsls	r3, r3, #24
 8004206:	b09d      	sub	sp, #116	; 0x74
 8004208:	4607      	mov	r7, r0
 800420a:	460d      	mov	r5, r1
 800420c:	4614      	mov	r4, r2
 800420e:	d50e      	bpl.n	800422e <_svfiprintf_r+0x32>
 8004210:	690b      	ldr	r3, [r1, #16]
 8004212:	b963      	cbnz	r3, 800422e <_svfiprintf_r+0x32>
 8004214:	2140      	movs	r1, #64	; 0x40
 8004216:	f000 fafd 	bl	8004814 <_malloc_r>
 800421a:	6028      	str	r0, [r5, #0]
 800421c:	6128      	str	r0, [r5, #16]
 800421e:	b920      	cbnz	r0, 800422a <_svfiprintf_r+0x2e>
 8004220:	230c      	movs	r3, #12
 8004222:	603b      	str	r3, [r7, #0]
 8004224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004228:	e0d1      	b.n	80043ce <_svfiprintf_r+0x1d2>
 800422a:	2340      	movs	r3, #64	; 0x40
 800422c:	616b      	str	r3, [r5, #20]
 800422e:	2300      	movs	r3, #0
 8004230:	9309      	str	r3, [sp, #36]	; 0x24
 8004232:	2320      	movs	r3, #32
 8004234:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004238:	f8cd 800c 	str.w	r8, [sp, #12]
 800423c:	2330      	movs	r3, #48	; 0x30
 800423e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80043e8 <_svfiprintf_r+0x1ec>
 8004242:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004246:	f04f 0901 	mov.w	r9, #1
 800424a:	4623      	mov	r3, r4
 800424c:	469a      	mov	sl, r3
 800424e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004252:	b10a      	cbz	r2, 8004258 <_svfiprintf_r+0x5c>
 8004254:	2a25      	cmp	r2, #37	; 0x25
 8004256:	d1f9      	bne.n	800424c <_svfiprintf_r+0x50>
 8004258:	ebba 0b04 	subs.w	fp, sl, r4
 800425c:	d00b      	beq.n	8004276 <_svfiprintf_r+0x7a>
 800425e:	465b      	mov	r3, fp
 8004260:	4622      	mov	r2, r4
 8004262:	4629      	mov	r1, r5
 8004264:	4638      	mov	r0, r7
 8004266:	f7ff ff6d 	bl	8004144 <__ssputs_r>
 800426a:	3001      	adds	r0, #1
 800426c:	f000 80aa 	beq.w	80043c4 <_svfiprintf_r+0x1c8>
 8004270:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004272:	445a      	add	r2, fp
 8004274:	9209      	str	r2, [sp, #36]	; 0x24
 8004276:	f89a 3000 	ldrb.w	r3, [sl]
 800427a:	2b00      	cmp	r3, #0
 800427c:	f000 80a2 	beq.w	80043c4 <_svfiprintf_r+0x1c8>
 8004280:	2300      	movs	r3, #0
 8004282:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004286:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800428a:	f10a 0a01 	add.w	sl, sl, #1
 800428e:	9304      	str	r3, [sp, #16]
 8004290:	9307      	str	r3, [sp, #28]
 8004292:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004296:	931a      	str	r3, [sp, #104]	; 0x68
 8004298:	4654      	mov	r4, sl
 800429a:	2205      	movs	r2, #5
 800429c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042a0:	4851      	ldr	r0, [pc, #324]	; (80043e8 <_svfiprintf_r+0x1ec>)
 80042a2:	f7fb ffc5 	bl	8000230 <memchr>
 80042a6:	9a04      	ldr	r2, [sp, #16]
 80042a8:	b9d8      	cbnz	r0, 80042e2 <_svfiprintf_r+0xe6>
 80042aa:	06d0      	lsls	r0, r2, #27
 80042ac:	bf44      	itt	mi
 80042ae:	2320      	movmi	r3, #32
 80042b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042b4:	0711      	lsls	r1, r2, #28
 80042b6:	bf44      	itt	mi
 80042b8:	232b      	movmi	r3, #43	; 0x2b
 80042ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042be:	f89a 3000 	ldrb.w	r3, [sl]
 80042c2:	2b2a      	cmp	r3, #42	; 0x2a
 80042c4:	d015      	beq.n	80042f2 <_svfiprintf_r+0xf6>
 80042c6:	9a07      	ldr	r2, [sp, #28]
 80042c8:	4654      	mov	r4, sl
 80042ca:	2000      	movs	r0, #0
 80042cc:	f04f 0c0a 	mov.w	ip, #10
 80042d0:	4621      	mov	r1, r4
 80042d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042d6:	3b30      	subs	r3, #48	; 0x30
 80042d8:	2b09      	cmp	r3, #9
 80042da:	d94e      	bls.n	800437a <_svfiprintf_r+0x17e>
 80042dc:	b1b0      	cbz	r0, 800430c <_svfiprintf_r+0x110>
 80042de:	9207      	str	r2, [sp, #28]
 80042e0:	e014      	b.n	800430c <_svfiprintf_r+0x110>
 80042e2:	eba0 0308 	sub.w	r3, r0, r8
 80042e6:	fa09 f303 	lsl.w	r3, r9, r3
 80042ea:	4313      	orrs	r3, r2
 80042ec:	9304      	str	r3, [sp, #16]
 80042ee:	46a2      	mov	sl, r4
 80042f0:	e7d2      	b.n	8004298 <_svfiprintf_r+0x9c>
 80042f2:	9b03      	ldr	r3, [sp, #12]
 80042f4:	1d19      	adds	r1, r3, #4
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	9103      	str	r1, [sp, #12]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	bfbb      	ittet	lt
 80042fe:	425b      	neglt	r3, r3
 8004300:	f042 0202 	orrlt.w	r2, r2, #2
 8004304:	9307      	strge	r3, [sp, #28]
 8004306:	9307      	strlt	r3, [sp, #28]
 8004308:	bfb8      	it	lt
 800430a:	9204      	strlt	r2, [sp, #16]
 800430c:	7823      	ldrb	r3, [r4, #0]
 800430e:	2b2e      	cmp	r3, #46	; 0x2e
 8004310:	d10c      	bne.n	800432c <_svfiprintf_r+0x130>
 8004312:	7863      	ldrb	r3, [r4, #1]
 8004314:	2b2a      	cmp	r3, #42	; 0x2a
 8004316:	d135      	bne.n	8004384 <_svfiprintf_r+0x188>
 8004318:	9b03      	ldr	r3, [sp, #12]
 800431a:	1d1a      	adds	r2, r3, #4
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	9203      	str	r2, [sp, #12]
 8004320:	2b00      	cmp	r3, #0
 8004322:	bfb8      	it	lt
 8004324:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004328:	3402      	adds	r4, #2
 800432a:	9305      	str	r3, [sp, #20]
 800432c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80043f8 <_svfiprintf_r+0x1fc>
 8004330:	7821      	ldrb	r1, [r4, #0]
 8004332:	2203      	movs	r2, #3
 8004334:	4650      	mov	r0, sl
 8004336:	f7fb ff7b 	bl	8000230 <memchr>
 800433a:	b140      	cbz	r0, 800434e <_svfiprintf_r+0x152>
 800433c:	2340      	movs	r3, #64	; 0x40
 800433e:	eba0 000a 	sub.w	r0, r0, sl
 8004342:	fa03 f000 	lsl.w	r0, r3, r0
 8004346:	9b04      	ldr	r3, [sp, #16]
 8004348:	4303      	orrs	r3, r0
 800434a:	3401      	adds	r4, #1
 800434c:	9304      	str	r3, [sp, #16]
 800434e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004352:	4826      	ldr	r0, [pc, #152]	; (80043ec <_svfiprintf_r+0x1f0>)
 8004354:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004358:	2206      	movs	r2, #6
 800435a:	f7fb ff69 	bl	8000230 <memchr>
 800435e:	2800      	cmp	r0, #0
 8004360:	d038      	beq.n	80043d4 <_svfiprintf_r+0x1d8>
 8004362:	4b23      	ldr	r3, [pc, #140]	; (80043f0 <_svfiprintf_r+0x1f4>)
 8004364:	bb1b      	cbnz	r3, 80043ae <_svfiprintf_r+0x1b2>
 8004366:	9b03      	ldr	r3, [sp, #12]
 8004368:	3307      	adds	r3, #7
 800436a:	f023 0307 	bic.w	r3, r3, #7
 800436e:	3308      	adds	r3, #8
 8004370:	9303      	str	r3, [sp, #12]
 8004372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004374:	4433      	add	r3, r6
 8004376:	9309      	str	r3, [sp, #36]	; 0x24
 8004378:	e767      	b.n	800424a <_svfiprintf_r+0x4e>
 800437a:	fb0c 3202 	mla	r2, ip, r2, r3
 800437e:	460c      	mov	r4, r1
 8004380:	2001      	movs	r0, #1
 8004382:	e7a5      	b.n	80042d0 <_svfiprintf_r+0xd4>
 8004384:	2300      	movs	r3, #0
 8004386:	3401      	adds	r4, #1
 8004388:	9305      	str	r3, [sp, #20]
 800438a:	4619      	mov	r1, r3
 800438c:	f04f 0c0a 	mov.w	ip, #10
 8004390:	4620      	mov	r0, r4
 8004392:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004396:	3a30      	subs	r2, #48	; 0x30
 8004398:	2a09      	cmp	r2, #9
 800439a:	d903      	bls.n	80043a4 <_svfiprintf_r+0x1a8>
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0c5      	beq.n	800432c <_svfiprintf_r+0x130>
 80043a0:	9105      	str	r1, [sp, #20]
 80043a2:	e7c3      	b.n	800432c <_svfiprintf_r+0x130>
 80043a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80043a8:	4604      	mov	r4, r0
 80043aa:	2301      	movs	r3, #1
 80043ac:	e7f0      	b.n	8004390 <_svfiprintf_r+0x194>
 80043ae:	ab03      	add	r3, sp, #12
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	462a      	mov	r2, r5
 80043b4:	4b0f      	ldr	r3, [pc, #60]	; (80043f4 <_svfiprintf_r+0x1f8>)
 80043b6:	a904      	add	r1, sp, #16
 80043b8:	4638      	mov	r0, r7
 80043ba:	f3af 8000 	nop.w
 80043be:	1c42      	adds	r2, r0, #1
 80043c0:	4606      	mov	r6, r0
 80043c2:	d1d6      	bne.n	8004372 <_svfiprintf_r+0x176>
 80043c4:	89ab      	ldrh	r3, [r5, #12]
 80043c6:	065b      	lsls	r3, r3, #25
 80043c8:	f53f af2c 	bmi.w	8004224 <_svfiprintf_r+0x28>
 80043cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043ce:	b01d      	add	sp, #116	; 0x74
 80043d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043d4:	ab03      	add	r3, sp, #12
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	462a      	mov	r2, r5
 80043da:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <_svfiprintf_r+0x1f8>)
 80043dc:	a904      	add	r1, sp, #16
 80043de:	4638      	mov	r0, r7
 80043e0:	f000 f87a 	bl	80044d8 <_printf_i>
 80043e4:	e7eb      	b.n	80043be <_svfiprintf_r+0x1c2>
 80043e6:	bf00      	nop
 80043e8:	080049dc 	.word	0x080049dc
 80043ec:	080049e6 	.word	0x080049e6
 80043f0:	00000000 	.word	0x00000000
 80043f4:	08004145 	.word	0x08004145
 80043f8:	080049e2 	.word	0x080049e2

080043fc <_printf_common>:
 80043fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004400:	4616      	mov	r6, r2
 8004402:	4699      	mov	r9, r3
 8004404:	688a      	ldr	r2, [r1, #8]
 8004406:	690b      	ldr	r3, [r1, #16]
 8004408:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800440c:	4293      	cmp	r3, r2
 800440e:	bfb8      	it	lt
 8004410:	4613      	movlt	r3, r2
 8004412:	6033      	str	r3, [r6, #0]
 8004414:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004418:	4607      	mov	r7, r0
 800441a:	460c      	mov	r4, r1
 800441c:	b10a      	cbz	r2, 8004422 <_printf_common+0x26>
 800441e:	3301      	adds	r3, #1
 8004420:	6033      	str	r3, [r6, #0]
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	0699      	lsls	r1, r3, #26
 8004426:	bf42      	ittt	mi
 8004428:	6833      	ldrmi	r3, [r6, #0]
 800442a:	3302      	addmi	r3, #2
 800442c:	6033      	strmi	r3, [r6, #0]
 800442e:	6825      	ldr	r5, [r4, #0]
 8004430:	f015 0506 	ands.w	r5, r5, #6
 8004434:	d106      	bne.n	8004444 <_printf_common+0x48>
 8004436:	f104 0a19 	add.w	sl, r4, #25
 800443a:	68e3      	ldr	r3, [r4, #12]
 800443c:	6832      	ldr	r2, [r6, #0]
 800443e:	1a9b      	subs	r3, r3, r2
 8004440:	42ab      	cmp	r3, r5
 8004442:	dc26      	bgt.n	8004492 <_printf_common+0x96>
 8004444:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004448:	1e13      	subs	r3, r2, #0
 800444a:	6822      	ldr	r2, [r4, #0]
 800444c:	bf18      	it	ne
 800444e:	2301      	movne	r3, #1
 8004450:	0692      	lsls	r2, r2, #26
 8004452:	d42b      	bmi.n	80044ac <_printf_common+0xb0>
 8004454:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004458:	4649      	mov	r1, r9
 800445a:	4638      	mov	r0, r7
 800445c:	47c0      	blx	r8
 800445e:	3001      	adds	r0, #1
 8004460:	d01e      	beq.n	80044a0 <_printf_common+0xa4>
 8004462:	6823      	ldr	r3, [r4, #0]
 8004464:	68e5      	ldr	r5, [r4, #12]
 8004466:	6832      	ldr	r2, [r6, #0]
 8004468:	f003 0306 	and.w	r3, r3, #6
 800446c:	2b04      	cmp	r3, #4
 800446e:	bf08      	it	eq
 8004470:	1aad      	subeq	r5, r5, r2
 8004472:	68a3      	ldr	r3, [r4, #8]
 8004474:	6922      	ldr	r2, [r4, #16]
 8004476:	bf0c      	ite	eq
 8004478:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800447c:	2500      	movne	r5, #0
 800447e:	4293      	cmp	r3, r2
 8004480:	bfc4      	itt	gt
 8004482:	1a9b      	subgt	r3, r3, r2
 8004484:	18ed      	addgt	r5, r5, r3
 8004486:	2600      	movs	r6, #0
 8004488:	341a      	adds	r4, #26
 800448a:	42b5      	cmp	r5, r6
 800448c:	d11a      	bne.n	80044c4 <_printf_common+0xc8>
 800448e:	2000      	movs	r0, #0
 8004490:	e008      	b.n	80044a4 <_printf_common+0xa8>
 8004492:	2301      	movs	r3, #1
 8004494:	4652      	mov	r2, sl
 8004496:	4649      	mov	r1, r9
 8004498:	4638      	mov	r0, r7
 800449a:	47c0      	blx	r8
 800449c:	3001      	adds	r0, #1
 800449e:	d103      	bne.n	80044a8 <_printf_common+0xac>
 80044a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044a8:	3501      	adds	r5, #1
 80044aa:	e7c6      	b.n	800443a <_printf_common+0x3e>
 80044ac:	18e1      	adds	r1, r4, r3
 80044ae:	1c5a      	adds	r2, r3, #1
 80044b0:	2030      	movs	r0, #48	; 0x30
 80044b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044b6:	4422      	add	r2, r4
 80044b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044c0:	3302      	adds	r3, #2
 80044c2:	e7c7      	b.n	8004454 <_printf_common+0x58>
 80044c4:	2301      	movs	r3, #1
 80044c6:	4622      	mov	r2, r4
 80044c8:	4649      	mov	r1, r9
 80044ca:	4638      	mov	r0, r7
 80044cc:	47c0      	blx	r8
 80044ce:	3001      	adds	r0, #1
 80044d0:	d0e6      	beq.n	80044a0 <_printf_common+0xa4>
 80044d2:	3601      	adds	r6, #1
 80044d4:	e7d9      	b.n	800448a <_printf_common+0x8e>
	...

080044d8 <_printf_i>:
 80044d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044dc:	460c      	mov	r4, r1
 80044de:	4691      	mov	r9, r2
 80044e0:	7e27      	ldrb	r7, [r4, #24]
 80044e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80044e4:	2f78      	cmp	r7, #120	; 0x78
 80044e6:	4680      	mov	r8, r0
 80044e8:	469a      	mov	sl, r3
 80044ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044ee:	d807      	bhi.n	8004500 <_printf_i+0x28>
 80044f0:	2f62      	cmp	r7, #98	; 0x62
 80044f2:	d80a      	bhi.n	800450a <_printf_i+0x32>
 80044f4:	2f00      	cmp	r7, #0
 80044f6:	f000 80d8 	beq.w	80046aa <_printf_i+0x1d2>
 80044fa:	2f58      	cmp	r7, #88	; 0x58
 80044fc:	f000 80a3 	beq.w	8004646 <_printf_i+0x16e>
 8004500:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004504:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004508:	e03a      	b.n	8004580 <_printf_i+0xa8>
 800450a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800450e:	2b15      	cmp	r3, #21
 8004510:	d8f6      	bhi.n	8004500 <_printf_i+0x28>
 8004512:	a001      	add	r0, pc, #4	; (adr r0, 8004518 <_printf_i+0x40>)
 8004514:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004518:	08004571 	.word	0x08004571
 800451c:	08004585 	.word	0x08004585
 8004520:	08004501 	.word	0x08004501
 8004524:	08004501 	.word	0x08004501
 8004528:	08004501 	.word	0x08004501
 800452c:	08004501 	.word	0x08004501
 8004530:	08004585 	.word	0x08004585
 8004534:	08004501 	.word	0x08004501
 8004538:	08004501 	.word	0x08004501
 800453c:	08004501 	.word	0x08004501
 8004540:	08004501 	.word	0x08004501
 8004544:	08004691 	.word	0x08004691
 8004548:	080045b5 	.word	0x080045b5
 800454c:	08004673 	.word	0x08004673
 8004550:	08004501 	.word	0x08004501
 8004554:	08004501 	.word	0x08004501
 8004558:	080046b3 	.word	0x080046b3
 800455c:	08004501 	.word	0x08004501
 8004560:	080045b5 	.word	0x080045b5
 8004564:	08004501 	.word	0x08004501
 8004568:	08004501 	.word	0x08004501
 800456c:	0800467b 	.word	0x0800467b
 8004570:	680b      	ldr	r3, [r1, #0]
 8004572:	1d1a      	adds	r2, r3, #4
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	600a      	str	r2, [r1, #0]
 8004578:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800457c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004580:	2301      	movs	r3, #1
 8004582:	e0a3      	b.n	80046cc <_printf_i+0x1f4>
 8004584:	6825      	ldr	r5, [r4, #0]
 8004586:	6808      	ldr	r0, [r1, #0]
 8004588:	062e      	lsls	r6, r5, #24
 800458a:	f100 0304 	add.w	r3, r0, #4
 800458e:	d50a      	bpl.n	80045a6 <_printf_i+0xce>
 8004590:	6805      	ldr	r5, [r0, #0]
 8004592:	600b      	str	r3, [r1, #0]
 8004594:	2d00      	cmp	r5, #0
 8004596:	da03      	bge.n	80045a0 <_printf_i+0xc8>
 8004598:	232d      	movs	r3, #45	; 0x2d
 800459a:	426d      	negs	r5, r5
 800459c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045a0:	485e      	ldr	r0, [pc, #376]	; (800471c <_printf_i+0x244>)
 80045a2:	230a      	movs	r3, #10
 80045a4:	e019      	b.n	80045da <_printf_i+0x102>
 80045a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80045aa:	6805      	ldr	r5, [r0, #0]
 80045ac:	600b      	str	r3, [r1, #0]
 80045ae:	bf18      	it	ne
 80045b0:	b22d      	sxthne	r5, r5
 80045b2:	e7ef      	b.n	8004594 <_printf_i+0xbc>
 80045b4:	680b      	ldr	r3, [r1, #0]
 80045b6:	6825      	ldr	r5, [r4, #0]
 80045b8:	1d18      	adds	r0, r3, #4
 80045ba:	6008      	str	r0, [r1, #0]
 80045bc:	0628      	lsls	r0, r5, #24
 80045be:	d501      	bpl.n	80045c4 <_printf_i+0xec>
 80045c0:	681d      	ldr	r5, [r3, #0]
 80045c2:	e002      	b.n	80045ca <_printf_i+0xf2>
 80045c4:	0669      	lsls	r1, r5, #25
 80045c6:	d5fb      	bpl.n	80045c0 <_printf_i+0xe8>
 80045c8:	881d      	ldrh	r5, [r3, #0]
 80045ca:	4854      	ldr	r0, [pc, #336]	; (800471c <_printf_i+0x244>)
 80045cc:	2f6f      	cmp	r7, #111	; 0x6f
 80045ce:	bf0c      	ite	eq
 80045d0:	2308      	moveq	r3, #8
 80045d2:	230a      	movne	r3, #10
 80045d4:	2100      	movs	r1, #0
 80045d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045da:	6866      	ldr	r6, [r4, #4]
 80045dc:	60a6      	str	r6, [r4, #8]
 80045de:	2e00      	cmp	r6, #0
 80045e0:	bfa2      	ittt	ge
 80045e2:	6821      	ldrge	r1, [r4, #0]
 80045e4:	f021 0104 	bicge.w	r1, r1, #4
 80045e8:	6021      	strge	r1, [r4, #0]
 80045ea:	b90d      	cbnz	r5, 80045f0 <_printf_i+0x118>
 80045ec:	2e00      	cmp	r6, #0
 80045ee:	d04d      	beq.n	800468c <_printf_i+0x1b4>
 80045f0:	4616      	mov	r6, r2
 80045f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80045f6:	fb03 5711 	mls	r7, r3, r1, r5
 80045fa:	5dc7      	ldrb	r7, [r0, r7]
 80045fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004600:	462f      	mov	r7, r5
 8004602:	42bb      	cmp	r3, r7
 8004604:	460d      	mov	r5, r1
 8004606:	d9f4      	bls.n	80045f2 <_printf_i+0x11a>
 8004608:	2b08      	cmp	r3, #8
 800460a:	d10b      	bne.n	8004624 <_printf_i+0x14c>
 800460c:	6823      	ldr	r3, [r4, #0]
 800460e:	07df      	lsls	r7, r3, #31
 8004610:	d508      	bpl.n	8004624 <_printf_i+0x14c>
 8004612:	6923      	ldr	r3, [r4, #16]
 8004614:	6861      	ldr	r1, [r4, #4]
 8004616:	4299      	cmp	r1, r3
 8004618:	bfde      	ittt	le
 800461a:	2330      	movle	r3, #48	; 0x30
 800461c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004620:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004624:	1b92      	subs	r2, r2, r6
 8004626:	6122      	str	r2, [r4, #16]
 8004628:	f8cd a000 	str.w	sl, [sp]
 800462c:	464b      	mov	r3, r9
 800462e:	aa03      	add	r2, sp, #12
 8004630:	4621      	mov	r1, r4
 8004632:	4640      	mov	r0, r8
 8004634:	f7ff fee2 	bl	80043fc <_printf_common>
 8004638:	3001      	adds	r0, #1
 800463a:	d14c      	bne.n	80046d6 <_printf_i+0x1fe>
 800463c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004640:	b004      	add	sp, #16
 8004642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004646:	4835      	ldr	r0, [pc, #212]	; (800471c <_printf_i+0x244>)
 8004648:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800464c:	6823      	ldr	r3, [r4, #0]
 800464e:	680e      	ldr	r6, [r1, #0]
 8004650:	061f      	lsls	r7, r3, #24
 8004652:	f856 5b04 	ldr.w	r5, [r6], #4
 8004656:	600e      	str	r6, [r1, #0]
 8004658:	d514      	bpl.n	8004684 <_printf_i+0x1ac>
 800465a:	07d9      	lsls	r1, r3, #31
 800465c:	bf44      	itt	mi
 800465e:	f043 0320 	orrmi.w	r3, r3, #32
 8004662:	6023      	strmi	r3, [r4, #0]
 8004664:	b91d      	cbnz	r5, 800466e <_printf_i+0x196>
 8004666:	6823      	ldr	r3, [r4, #0]
 8004668:	f023 0320 	bic.w	r3, r3, #32
 800466c:	6023      	str	r3, [r4, #0]
 800466e:	2310      	movs	r3, #16
 8004670:	e7b0      	b.n	80045d4 <_printf_i+0xfc>
 8004672:	6823      	ldr	r3, [r4, #0]
 8004674:	f043 0320 	orr.w	r3, r3, #32
 8004678:	6023      	str	r3, [r4, #0]
 800467a:	2378      	movs	r3, #120	; 0x78
 800467c:	4828      	ldr	r0, [pc, #160]	; (8004720 <_printf_i+0x248>)
 800467e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004682:	e7e3      	b.n	800464c <_printf_i+0x174>
 8004684:	065e      	lsls	r6, r3, #25
 8004686:	bf48      	it	mi
 8004688:	b2ad      	uxthmi	r5, r5
 800468a:	e7e6      	b.n	800465a <_printf_i+0x182>
 800468c:	4616      	mov	r6, r2
 800468e:	e7bb      	b.n	8004608 <_printf_i+0x130>
 8004690:	680b      	ldr	r3, [r1, #0]
 8004692:	6826      	ldr	r6, [r4, #0]
 8004694:	6960      	ldr	r0, [r4, #20]
 8004696:	1d1d      	adds	r5, r3, #4
 8004698:	600d      	str	r5, [r1, #0]
 800469a:	0635      	lsls	r5, r6, #24
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	d501      	bpl.n	80046a4 <_printf_i+0x1cc>
 80046a0:	6018      	str	r0, [r3, #0]
 80046a2:	e002      	b.n	80046aa <_printf_i+0x1d2>
 80046a4:	0671      	lsls	r1, r6, #25
 80046a6:	d5fb      	bpl.n	80046a0 <_printf_i+0x1c8>
 80046a8:	8018      	strh	r0, [r3, #0]
 80046aa:	2300      	movs	r3, #0
 80046ac:	6123      	str	r3, [r4, #16]
 80046ae:	4616      	mov	r6, r2
 80046b0:	e7ba      	b.n	8004628 <_printf_i+0x150>
 80046b2:	680b      	ldr	r3, [r1, #0]
 80046b4:	1d1a      	adds	r2, r3, #4
 80046b6:	600a      	str	r2, [r1, #0]
 80046b8:	681e      	ldr	r6, [r3, #0]
 80046ba:	6862      	ldr	r2, [r4, #4]
 80046bc:	2100      	movs	r1, #0
 80046be:	4630      	mov	r0, r6
 80046c0:	f7fb fdb6 	bl	8000230 <memchr>
 80046c4:	b108      	cbz	r0, 80046ca <_printf_i+0x1f2>
 80046c6:	1b80      	subs	r0, r0, r6
 80046c8:	6060      	str	r0, [r4, #4]
 80046ca:	6863      	ldr	r3, [r4, #4]
 80046cc:	6123      	str	r3, [r4, #16]
 80046ce:	2300      	movs	r3, #0
 80046d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046d4:	e7a8      	b.n	8004628 <_printf_i+0x150>
 80046d6:	6923      	ldr	r3, [r4, #16]
 80046d8:	4632      	mov	r2, r6
 80046da:	4649      	mov	r1, r9
 80046dc:	4640      	mov	r0, r8
 80046de:	47d0      	blx	sl
 80046e0:	3001      	adds	r0, #1
 80046e2:	d0ab      	beq.n	800463c <_printf_i+0x164>
 80046e4:	6823      	ldr	r3, [r4, #0]
 80046e6:	079b      	lsls	r3, r3, #30
 80046e8:	d413      	bmi.n	8004712 <_printf_i+0x23a>
 80046ea:	68e0      	ldr	r0, [r4, #12]
 80046ec:	9b03      	ldr	r3, [sp, #12]
 80046ee:	4298      	cmp	r0, r3
 80046f0:	bfb8      	it	lt
 80046f2:	4618      	movlt	r0, r3
 80046f4:	e7a4      	b.n	8004640 <_printf_i+0x168>
 80046f6:	2301      	movs	r3, #1
 80046f8:	4632      	mov	r2, r6
 80046fa:	4649      	mov	r1, r9
 80046fc:	4640      	mov	r0, r8
 80046fe:	47d0      	blx	sl
 8004700:	3001      	adds	r0, #1
 8004702:	d09b      	beq.n	800463c <_printf_i+0x164>
 8004704:	3501      	adds	r5, #1
 8004706:	68e3      	ldr	r3, [r4, #12]
 8004708:	9903      	ldr	r1, [sp, #12]
 800470a:	1a5b      	subs	r3, r3, r1
 800470c:	42ab      	cmp	r3, r5
 800470e:	dcf2      	bgt.n	80046f6 <_printf_i+0x21e>
 8004710:	e7eb      	b.n	80046ea <_printf_i+0x212>
 8004712:	2500      	movs	r5, #0
 8004714:	f104 0619 	add.w	r6, r4, #25
 8004718:	e7f5      	b.n	8004706 <_printf_i+0x22e>
 800471a:	bf00      	nop
 800471c:	080049ed 	.word	0x080049ed
 8004720:	080049fe 	.word	0x080049fe

08004724 <memcpy>:
 8004724:	440a      	add	r2, r1
 8004726:	4291      	cmp	r1, r2
 8004728:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800472c:	d100      	bne.n	8004730 <memcpy+0xc>
 800472e:	4770      	bx	lr
 8004730:	b510      	push	{r4, lr}
 8004732:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004736:	f803 4f01 	strb.w	r4, [r3, #1]!
 800473a:	4291      	cmp	r1, r2
 800473c:	d1f9      	bne.n	8004732 <memcpy+0xe>
 800473e:	bd10      	pop	{r4, pc}

08004740 <memmove>:
 8004740:	4288      	cmp	r0, r1
 8004742:	b510      	push	{r4, lr}
 8004744:	eb01 0402 	add.w	r4, r1, r2
 8004748:	d902      	bls.n	8004750 <memmove+0x10>
 800474a:	4284      	cmp	r4, r0
 800474c:	4623      	mov	r3, r4
 800474e:	d807      	bhi.n	8004760 <memmove+0x20>
 8004750:	1e43      	subs	r3, r0, #1
 8004752:	42a1      	cmp	r1, r4
 8004754:	d008      	beq.n	8004768 <memmove+0x28>
 8004756:	f811 2b01 	ldrb.w	r2, [r1], #1
 800475a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800475e:	e7f8      	b.n	8004752 <memmove+0x12>
 8004760:	4402      	add	r2, r0
 8004762:	4601      	mov	r1, r0
 8004764:	428a      	cmp	r2, r1
 8004766:	d100      	bne.n	800476a <memmove+0x2a>
 8004768:	bd10      	pop	{r4, pc}
 800476a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800476e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004772:	e7f7      	b.n	8004764 <memmove+0x24>

08004774 <_free_r>:
 8004774:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004776:	2900      	cmp	r1, #0
 8004778:	d048      	beq.n	800480c <_free_r+0x98>
 800477a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800477e:	9001      	str	r0, [sp, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	f1a1 0404 	sub.w	r4, r1, #4
 8004786:	bfb8      	it	lt
 8004788:	18e4      	addlt	r4, r4, r3
 800478a:	f000 f8d3 	bl	8004934 <__malloc_lock>
 800478e:	4a20      	ldr	r2, [pc, #128]	; (8004810 <_free_r+0x9c>)
 8004790:	9801      	ldr	r0, [sp, #4]
 8004792:	6813      	ldr	r3, [r2, #0]
 8004794:	4615      	mov	r5, r2
 8004796:	b933      	cbnz	r3, 80047a6 <_free_r+0x32>
 8004798:	6063      	str	r3, [r4, #4]
 800479a:	6014      	str	r4, [r2, #0]
 800479c:	b003      	add	sp, #12
 800479e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80047a2:	f000 b8cd 	b.w	8004940 <__malloc_unlock>
 80047a6:	42a3      	cmp	r3, r4
 80047a8:	d90b      	bls.n	80047c2 <_free_r+0x4e>
 80047aa:	6821      	ldr	r1, [r4, #0]
 80047ac:	1862      	adds	r2, r4, r1
 80047ae:	4293      	cmp	r3, r2
 80047b0:	bf04      	itt	eq
 80047b2:	681a      	ldreq	r2, [r3, #0]
 80047b4:	685b      	ldreq	r3, [r3, #4]
 80047b6:	6063      	str	r3, [r4, #4]
 80047b8:	bf04      	itt	eq
 80047ba:	1852      	addeq	r2, r2, r1
 80047bc:	6022      	streq	r2, [r4, #0]
 80047be:	602c      	str	r4, [r5, #0]
 80047c0:	e7ec      	b.n	800479c <_free_r+0x28>
 80047c2:	461a      	mov	r2, r3
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	b10b      	cbz	r3, 80047cc <_free_r+0x58>
 80047c8:	42a3      	cmp	r3, r4
 80047ca:	d9fa      	bls.n	80047c2 <_free_r+0x4e>
 80047cc:	6811      	ldr	r1, [r2, #0]
 80047ce:	1855      	adds	r5, r2, r1
 80047d0:	42a5      	cmp	r5, r4
 80047d2:	d10b      	bne.n	80047ec <_free_r+0x78>
 80047d4:	6824      	ldr	r4, [r4, #0]
 80047d6:	4421      	add	r1, r4
 80047d8:	1854      	adds	r4, r2, r1
 80047da:	42a3      	cmp	r3, r4
 80047dc:	6011      	str	r1, [r2, #0]
 80047de:	d1dd      	bne.n	800479c <_free_r+0x28>
 80047e0:	681c      	ldr	r4, [r3, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	6053      	str	r3, [r2, #4]
 80047e6:	4421      	add	r1, r4
 80047e8:	6011      	str	r1, [r2, #0]
 80047ea:	e7d7      	b.n	800479c <_free_r+0x28>
 80047ec:	d902      	bls.n	80047f4 <_free_r+0x80>
 80047ee:	230c      	movs	r3, #12
 80047f0:	6003      	str	r3, [r0, #0]
 80047f2:	e7d3      	b.n	800479c <_free_r+0x28>
 80047f4:	6825      	ldr	r5, [r4, #0]
 80047f6:	1961      	adds	r1, r4, r5
 80047f8:	428b      	cmp	r3, r1
 80047fa:	bf04      	itt	eq
 80047fc:	6819      	ldreq	r1, [r3, #0]
 80047fe:	685b      	ldreq	r3, [r3, #4]
 8004800:	6063      	str	r3, [r4, #4]
 8004802:	bf04      	itt	eq
 8004804:	1949      	addeq	r1, r1, r5
 8004806:	6021      	streq	r1, [r4, #0]
 8004808:	6054      	str	r4, [r2, #4]
 800480a:	e7c7      	b.n	800479c <_free_r+0x28>
 800480c:	b003      	add	sp, #12
 800480e:	bd30      	pop	{r4, r5, pc}
 8004810:	20000098 	.word	0x20000098

08004814 <_malloc_r>:
 8004814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004816:	1ccd      	adds	r5, r1, #3
 8004818:	f025 0503 	bic.w	r5, r5, #3
 800481c:	3508      	adds	r5, #8
 800481e:	2d0c      	cmp	r5, #12
 8004820:	bf38      	it	cc
 8004822:	250c      	movcc	r5, #12
 8004824:	2d00      	cmp	r5, #0
 8004826:	4606      	mov	r6, r0
 8004828:	db01      	blt.n	800482e <_malloc_r+0x1a>
 800482a:	42a9      	cmp	r1, r5
 800482c:	d903      	bls.n	8004836 <_malloc_r+0x22>
 800482e:	230c      	movs	r3, #12
 8004830:	6033      	str	r3, [r6, #0]
 8004832:	2000      	movs	r0, #0
 8004834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004836:	f000 f87d 	bl	8004934 <__malloc_lock>
 800483a:	4921      	ldr	r1, [pc, #132]	; (80048c0 <_malloc_r+0xac>)
 800483c:	680a      	ldr	r2, [r1, #0]
 800483e:	4614      	mov	r4, r2
 8004840:	b99c      	cbnz	r4, 800486a <_malloc_r+0x56>
 8004842:	4f20      	ldr	r7, [pc, #128]	; (80048c4 <_malloc_r+0xb0>)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	b923      	cbnz	r3, 8004852 <_malloc_r+0x3e>
 8004848:	4621      	mov	r1, r4
 800484a:	4630      	mov	r0, r6
 800484c:	f000 f862 	bl	8004914 <_sbrk_r>
 8004850:	6038      	str	r0, [r7, #0]
 8004852:	4629      	mov	r1, r5
 8004854:	4630      	mov	r0, r6
 8004856:	f000 f85d 	bl	8004914 <_sbrk_r>
 800485a:	1c43      	adds	r3, r0, #1
 800485c:	d123      	bne.n	80048a6 <_malloc_r+0x92>
 800485e:	230c      	movs	r3, #12
 8004860:	6033      	str	r3, [r6, #0]
 8004862:	4630      	mov	r0, r6
 8004864:	f000 f86c 	bl	8004940 <__malloc_unlock>
 8004868:	e7e3      	b.n	8004832 <_malloc_r+0x1e>
 800486a:	6823      	ldr	r3, [r4, #0]
 800486c:	1b5b      	subs	r3, r3, r5
 800486e:	d417      	bmi.n	80048a0 <_malloc_r+0x8c>
 8004870:	2b0b      	cmp	r3, #11
 8004872:	d903      	bls.n	800487c <_malloc_r+0x68>
 8004874:	6023      	str	r3, [r4, #0]
 8004876:	441c      	add	r4, r3
 8004878:	6025      	str	r5, [r4, #0]
 800487a:	e004      	b.n	8004886 <_malloc_r+0x72>
 800487c:	6863      	ldr	r3, [r4, #4]
 800487e:	42a2      	cmp	r2, r4
 8004880:	bf0c      	ite	eq
 8004882:	600b      	streq	r3, [r1, #0]
 8004884:	6053      	strne	r3, [r2, #4]
 8004886:	4630      	mov	r0, r6
 8004888:	f000 f85a 	bl	8004940 <__malloc_unlock>
 800488c:	f104 000b 	add.w	r0, r4, #11
 8004890:	1d23      	adds	r3, r4, #4
 8004892:	f020 0007 	bic.w	r0, r0, #7
 8004896:	1ac2      	subs	r2, r0, r3
 8004898:	d0cc      	beq.n	8004834 <_malloc_r+0x20>
 800489a:	1a1b      	subs	r3, r3, r0
 800489c:	50a3      	str	r3, [r4, r2]
 800489e:	e7c9      	b.n	8004834 <_malloc_r+0x20>
 80048a0:	4622      	mov	r2, r4
 80048a2:	6864      	ldr	r4, [r4, #4]
 80048a4:	e7cc      	b.n	8004840 <_malloc_r+0x2c>
 80048a6:	1cc4      	adds	r4, r0, #3
 80048a8:	f024 0403 	bic.w	r4, r4, #3
 80048ac:	42a0      	cmp	r0, r4
 80048ae:	d0e3      	beq.n	8004878 <_malloc_r+0x64>
 80048b0:	1a21      	subs	r1, r4, r0
 80048b2:	4630      	mov	r0, r6
 80048b4:	f000 f82e 	bl	8004914 <_sbrk_r>
 80048b8:	3001      	adds	r0, #1
 80048ba:	d1dd      	bne.n	8004878 <_malloc_r+0x64>
 80048bc:	e7cf      	b.n	800485e <_malloc_r+0x4a>
 80048be:	bf00      	nop
 80048c0:	20000098 	.word	0x20000098
 80048c4:	2000009c 	.word	0x2000009c

080048c8 <_realloc_r>:
 80048c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ca:	4607      	mov	r7, r0
 80048cc:	4614      	mov	r4, r2
 80048ce:	460e      	mov	r6, r1
 80048d0:	b921      	cbnz	r1, 80048dc <_realloc_r+0x14>
 80048d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80048d6:	4611      	mov	r1, r2
 80048d8:	f7ff bf9c 	b.w	8004814 <_malloc_r>
 80048dc:	b922      	cbnz	r2, 80048e8 <_realloc_r+0x20>
 80048de:	f7ff ff49 	bl	8004774 <_free_r>
 80048e2:	4625      	mov	r5, r4
 80048e4:	4628      	mov	r0, r5
 80048e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048e8:	f000 f830 	bl	800494c <_malloc_usable_size_r>
 80048ec:	42a0      	cmp	r0, r4
 80048ee:	d20f      	bcs.n	8004910 <_realloc_r+0x48>
 80048f0:	4621      	mov	r1, r4
 80048f2:	4638      	mov	r0, r7
 80048f4:	f7ff ff8e 	bl	8004814 <_malloc_r>
 80048f8:	4605      	mov	r5, r0
 80048fa:	2800      	cmp	r0, #0
 80048fc:	d0f2      	beq.n	80048e4 <_realloc_r+0x1c>
 80048fe:	4631      	mov	r1, r6
 8004900:	4622      	mov	r2, r4
 8004902:	f7ff ff0f 	bl	8004724 <memcpy>
 8004906:	4631      	mov	r1, r6
 8004908:	4638      	mov	r0, r7
 800490a:	f7ff ff33 	bl	8004774 <_free_r>
 800490e:	e7e9      	b.n	80048e4 <_realloc_r+0x1c>
 8004910:	4635      	mov	r5, r6
 8004912:	e7e7      	b.n	80048e4 <_realloc_r+0x1c>

08004914 <_sbrk_r>:
 8004914:	b538      	push	{r3, r4, r5, lr}
 8004916:	4d06      	ldr	r5, [pc, #24]	; (8004930 <_sbrk_r+0x1c>)
 8004918:	2300      	movs	r3, #0
 800491a:	4604      	mov	r4, r0
 800491c:	4608      	mov	r0, r1
 800491e:	602b      	str	r3, [r5, #0]
 8004920:	f7fc fca0 	bl	8001264 <_sbrk>
 8004924:	1c43      	adds	r3, r0, #1
 8004926:	d102      	bne.n	800492e <_sbrk_r+0x1a>
 8004928:	682b      	ldr	r3, [r5, #0]
 800492a:	b103      	cbz	r3, 800492e <_sbrk_r+0x1a>
 800492c:	6023      	str	r3, [r4, #0]
 800492e:	bd38      	pop	{r3, r4, r5, pc}
 8004930:	2000018c 	.word	0x2000018c

08004934 <__malloc_lock>:
 8004934:	4801      	ldr	r0, [pc, #4]	; (800493c <__malloc_lock+0x8>)
 8004936:	f000 b811 	b.w	800495c <__retarget_lock_acquire_recursive>
 800493a:	bf00      	nop
 800493c:	20000194 	.word	0x20000194

08004940 <__malloc_unlock>:
 8004940:	4801      	ldr	r0, [pc, #4]	; (8004948 <__malloc_unlock+0x8>)
 8004942:	f000 b80c 	b.w	800495e <__retarget_lock_release_recursive>
 8004946:	bf00      	nop
 8004948:	20000194 	.word	0x20000194

0800494c <_malloc_usable_size_r>:
 800494c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004950:	1f18      	subs	r0, r3, #4
 8004952:	2b00      	cmp	r3, #0
 8004954:	bfbc      	itt	lt
 8004956:	580b      	ldrlt	r3, [r1, r0]
 8004958:	18c0      	addlt	r0, r0, r3
 800495a:	4770      	bx	lr

0800495c <__retarget_lock_acquire_recursive>:
 800495c:	4770      	bx	lr

0800495e <__retarget_lock_release_recursive>:
 800495e:	4770      	bx	lr

08004960 <_init>:
 8004960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004962:	bf00      	nop
 8004964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004966:	bc08      	pop	{r3}
 8004968:	469e      	mov	lr, r3
 800496a:	4770      	bx	lr

0800496c <_fini>:
 800496c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800496e:	bf00      	nop
 8004970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004972:	bc08      	pop	{r3}
 8004974:	469e      	mov	lr, r3
 8004976:	4770      	bx	lr
